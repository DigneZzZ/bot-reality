from typing import Optional
import asyncio
from aiogram import Bot, Router, types
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatType
import os
import redis.asyncio as redis
from redis_queue import enqueue, get_redis
from collections import defaultdict
from time import time
import re
from urllib.parse import urlparse, quote, unquote
import logging
from logging.handlers import RotatingFileHandler
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
try:
    from retry_logic import retry_with_backoff, DOMAIN_CHECK_RETRY, REDIS_RETRY, TELEGRAM_RETRY
    RETRY_AVAILABLE = True
except ImportError:
    RETRY_AVAILABLE = False
    
try:
    from progress_tracker import BatchProcessor
    PROGRESS_AVAILABLE = True
except ImportError:
    PROGRESS_AVAILABLE = False
    
try:
    from analytics import AnalyticsCollector
    ANALYTICS_AVAILABLE = True
except ImportError:
    ANALYTICS_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "/app"
log_file = os.path.join(log_dir, "bot.log")
fallback_log_file = "/tmp/bot.log"
os.makedirs(log_dir, exist_ok=True)
log_handlers = []

try:
    with open(log_file, "a") as f:
        f.write("")
    # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤
    file_handler = RotatingFileHandler(log_file, maxBytes=5*1024*1024, backupCount=2)
    log_handlers.append(file_handler)
except Exception as e:
    logging.warning(f"Failed to initialize logging to {log_file}: {str(e)}. Falling back to {fallback_log_file}")
    os.makedirs("/tmp", exist_ok=True)
    # –î–ª—è fallback —Ñ–∞–π–ª–∞ —Ç–æ–∂–µ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
    file_handler = RotatingFileHandler(fallback_log_file, maxBytes=5*1024*1024, backupCount=2)
    log_handlers.append(file_handler)

log_handlers.append(logging.StreamHandler())

logging.basicConfig(
    level=logging.WARNING,  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å INFO –Ω–∞ WARNING
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=log_handlers
)

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
SAVE_APPROVED_DOMAINS = os.getenv("SAVE_APPROVED_DOMAINS", "false").lower() == "true"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
AUTO_DELETE_GROUP_MESSAGES = os.getenv("AUTO_DELETE_GROUP_MESSAGES", "true").lower() == "true"
AUTO_DELETE_TIMEOUT = int(os.getenv("AUTO_DELETE_TIMEOUT", "300"))  # 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –õ–∏–º–∏—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ (–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ)
GROUP_RATE_LIMIT_MINUTES = int(os.getenv("GROUP_RATE_LIMIT_MINUTES", "5"))  # –ú–∏–Ω—É—Ç –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
GROUP_DAILY_LIMIT = int(os.getenv("GROUP_DAILY_LIMIT", "50"))               # –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å

# –õ–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
PRIVATE_RATE_LIMIT_PER_MINUTE = int(os.getenv("PRIVATE_RATE_LIMIT_PER_MINUTE", "10"))  # –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
PRIVATE_DAILY_LIMIT = int(os.getenv("PRIVATE_DAILY_LIMIT", "100"))                     # –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å

# –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø
GROUP_MODE_ENABLED = os.getenv("GROUP_MODE_ENABLED", "true").lower() == "true"
GROUP_COMMAND_PREFIX = os.getenv("GROUP_COMMAND_PREFIX", "!")  # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤ –≥—Ä—É–ø–ø–∞—Ö
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø
AUTHORIZED_GROUPS_STR = os.getenv("AUTHORIZED_GROUPS", "").strip()
AUTHORIZED_GROUPS = set()
if AUTHORIZED_GROUPS_STR:
    try:
        AUTHORIZED_GROUPS = set(int(group_id.strip()) for group_id in AUTHORIZED_GROUPS_STR.split(",") if group_id.strip())
    except ValueError:
        logging.error("Invalid AUTHORIZED_GROUPS format. Should be comma-separated integers.")
AUTO_LEAVE_UNAUTHORIZED = os.getenv("AUTO_LEAVE_UNAUTHORIZED", "false").lower() == "true"

bot = Bot(token=TOKEN, parse_mode="HTML")
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
analytics_collector = None

async def init_analytics():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    global analytics_collector
    if ANALYTICS_AVAILABLE:
        try:
            redis_client = await get_redis()
            analytics_collector = AnalyticsCollector(redis_client)
            logging.info("‚úÖ Analytics initialized successfully")
        except Exception as e:
            logging.warning(f"‚ùå Failed to initialize analytics: {e}")
            logging.warning("üí° Check Redis connection and settings")
    else:
        logging.warning("‚ùå Analytics module not available - check dependencies")

def is_group_chat(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –≥—Ä—É–ø–ø–æ–≤—ã–º"""
    return message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]

def is_authorized_group(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞"""
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
    if not AUTHORIZED_GROUPS:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥—Ä—É–ø–ø–∞ –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    return chat_id in AUTHORIZED_GROUPS

async def handle_unauthorized_group(message: types.Message) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"""
    chat_id = message.chat.id
    
    if not is_authorized_group(chat_id):
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
        logging.warning(f"Unauthorized group access attempt: {chat_id} ({message.chat.title})")
        
        if AUTO_LEAVE_UNAUTHORIZED:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
                await message.answer(
                    "‚ö†Ô∏è <b>–ë–æ—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ</b>\n\n"
                    "–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ ID –≥—Ä—É–ø–ø—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é AUTHORIZED_GROUPS.\n"
                    f"ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: <code>{chat_id}</code>\n\n"
                    "–ë–æ—Ç –ø–æ–∫–∏–Ω–µ—Ç –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥."
                )
                
                # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–∫–∏–¥–∞–µ–º –≥—Ä—É–ø–ø—É
                await asyncio.sleep(10)
                await bot.leave_chat(chat_id)
                logging.info(f"Left unauthorized group: {chat_id}")
                
            except Exception as e:
                logging.error(f"Failed to leave unauthorized group {chat_id}: {e}")
        else:
            # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
            await message.answer(
                "‚ö†Ô∏è <b>–ë–æ—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ</b>\n\n"
                f"ID –≥—Ä—É–ø–ø—ã: <code>{chat_id}</code>\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
            )
        
        return True  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    
    return False  # –ì—Ä—É–ø–ø–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

async def should_respond_in_group(message: types.Message) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ"""
    if not GROUP_MODE_ENABLED:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≥—Ä—É–ø–ø—ã
    if not is_authorized_group(message.chat.id):
        await handle_unauthorized_group(message)
        return False
    
    # –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞:
    # 1. –ö–æ–º–∞–Ω–¥—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º (!check, !full)
    # 2. –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ (@botname)
    # 3. –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    
    text = message.text or ""
    
    # –ö–æ–º–∞–Ω–¥—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
    if text.startswith(GROUP_COMMAND_PREFIX):
        return True
    
    # –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
    if message.entities:
        for entity in message.entities:
            if entity.type == "mention":
                mention = text[entity.offset:entity.offset + entity.length]
                bot_info = await bot.get_me()
                if bot_info.username and mention.lower().replace("@", "") == bot_info.username.lower():
                    return True
    
    # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if message.reply_to_message and message.reply_to_message.from_user and message.reply_to_message.from_user.id == (await bot.get_me()).id:
        return True
        
    return False

async def schedule_message_deletion(chat_id: int, message_id: int, delay: int = AUTO_DELETE_TIMEOUT):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    if not AUTO_DELETE_GROUP_MESSAGES:
        return
        
    async def delete_after_delay():
        try:
            await asyncio.sleep(delay)
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
            logging.info(f"Auto-deleted message {message_id} in chat {chat_id}")
        except Exception as e:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –±–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –ø—Ä–∞–≤–∞
            logging.debug(f"Could not delete message {message_id} in chat {chat_id}: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(delete_after_delay())

def get_topic_thread_id(message: types.Message) -> int | None:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–º—ã (—Ç–æ–ø–∏–∫–∞) –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ï—Å–ª–∏ —ç—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ —Å —Ç–µ–º–∞–º–∏
    if message.chat.type == ChatType.SUPERGROUP and hasattr(message, 'message_thread_id'):
        return message.message_thread_id
    return None

async def send_topic_aware_message(message: types.Message, text: str, reply_markup=None) -> types.Message:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ç–µ–º—ã (—Ç–æ–ø–∏–∫–∞)"""
    thread_id = get_topic_thread_id(message)
    
    try:
        if thread_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ç–µ–º—É
            sent_message = await bot.send_message(
                chat_id=message.chat.id,
                text=text,
                message_thread_id=thread_id,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        else:
            # –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–∏–ª–∏ –≥—Ä—É–ø–ø–∞ –±–µ–∑ —Ç–µ–º)
            sent_message = await message.answer(text, reply_markup=reply_markup)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP] and AUTO_DELETE_GROUP_MESSAGES:
            await schedule_message_deletion(message.chat.id, sent_message.message_id)
        
        return sent_message
        
    except Exception as e:
        # Fallback: –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        logging.warning(f"Failed to send topic-aware message: {e}, falling back to regular message")
        sent_message = await message.answer(text, reply_markup=reply_markup)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP] and AUTO_DELETE_GROUP_MESSAGES:
            await schedule_message_deletion(message.chat.id, sent_message.message_id)
        
        return sent_message

async def log_analytics(action: str, user_id: int, **kwargs):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    if analytics_collector:
        try:
            if action == "domain_check":
                await analytics_collector.log_domain_check(
                    user_id=user_id,
                    domain=kwargs.get("domain", ""),
                    check_type=kwargs.get("check_type", "short"),
                    result_status=kwargs.get("result_status", "unknown"),
                    execution_time=kwargs.get("execution_time")
                )
            else:
                await analytics_collector.log_user_activity(
                    user_id=user_id,
                    action=action,
                    details=kwargs.get("details")
                )
        except Exception as e:
            logging.warning(f"Failed to log analytics: {e}")

def get_main_keyboard(is_admin: bool):
    buttons = [
        [InlineKeyboardButton(text="–°–º–µ–Ω–∞ –≤—ã–≤–æ–¥–∞ full / short", callback_data="mode")],
        [InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="history")]
    ]
    if is_admin:
        admin_buttons = [
            [InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="reset_queue")],
            [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", callback_data="clearcache")]
        ]
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞–º–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è
        if SAVE_APPROVED_DOMAINS:
            admin_buttons.extend([
                [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤", callback_data="approved")],
                [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤", callback_data="clear_approved")],
                [InlineKeyboardButton(text="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–º–µ–Ω—ã", callback_data="export_approved")]
            ])
        buttons.extend(admin_buttons)
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_full_report_button(domain: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç", callback_data=f"full_report:{domain}")]
    ])
    return keyboard

def get_group_full_report_button(domain: str, user_id: int):
    """–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É —Å deep link –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ –õ–° –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    bot_username = os.getenv("BOT_USERNAME", "bot")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞
    # –ö–æ–¥–∏—Ä—É–µ–º –¥–æ–º–µ–Ω –¥–ª—è URL
    encoded_domain = quote(domain, safe='')
    deep_link = f"https://t.me/{bot_username}?start=full_{encoded_domain}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –õ–°", url=deep_link)]
    ])
    return keyboard

async def get_redis():
    try:
        redis_client = redis.Redis(
            host=os.getenv("REDIS_HOST", "localhost"),
            port=int(os.getenv("REDIS_PORT", "6379")),
            password=os.getenv("REDIS_PASSWORD"),
            decode_responses=True,
            retry_on_timeout=True
        )
        return redis_client
    except Exception as e:
        logging.error(f"Failed to connect to Redis: {str(e)}")
        raise

user_requests = defaultdict(list)
user_violations = {}

def extract_domain(text: str):
    text = text.strip()
    text = re.sub(r':\d+$', '', text)
    if text.startswith("http://") or text.startswith("https://"):
        try:
            parsed = urlparse(text)
            if parsed.hostname:
                return parsed.hostname
        except:
            return None
    if re.match(r"^(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$", text):
        return text
    return None

def rate_limited(user_id):
    now = time()
    user_requests[user_id] = [ts for ts in user_requests[user_id] if now - ts < 30]
    if len(user_requests[user_id]) >= 10:
        return True
    user_requests[user_id].append(now)
    return False

def get_penalty(user_id):
    record = user_violations.get(user_id, {"count": 0, "until": 0})
    now = time()
    if record["count"] < 5:
        return 0, False
    if now < record["until"]:
        return int(record["until"] - now), True
    return 0, False

def register_violation(user_id):
    record = user_violations.get(user_id, {"count": 0, "until": 0})
    record["count"] += 1
    duration = [60, 300, 900, 3600]
    if record["count"] >= 5:
        stage = record["count"] - 5
        timeout = duration[min(stage, len(duration) - 1)]
        record["until"] = time() + timeout
    user_violations[user_id] = record
    return int(record["until"] - time()) if record["count"] >= 5 else 0

async def check_rate_limit(user_id: int, is_group: bool = False, chat_id: Optional[int] = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    r = await get_redis()
    try:
        if is_group:
            # –î–ª—è –≥—Ä—É–ø–ø: –ª–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
            if chat_id is None:
                # Fallback –¥–ª—è callback –∫–Ω–æ–ø–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                last_request_key = f"group_last_global:{user_id}"
            else:
                last_request_key = f"group_last:{user_id}:{chat_id}"
            
            last_request = await r.get(last_request_key)
            
            if last_request:
                last_time = float(last_request)
                current_time = time()
                time_limit = GROUP_RATE_LIMIT_MINUTES * 60  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                if current_time - last_time < time_limit:
                    remaining = time_limit - (current_time - last_time)
                    logging.warning(f"Group rate limit exceeded for user {user_id} in chat {chat_id}: {remaining:.0f}s remaining")
                    return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            await r.set(last_request_key, time())
            await r.expire(last_request_key, GROUP_RATE_LIMIT_MINUTES * 60)
            return True
        else:
            # –î–ª—è –õ–°: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ env
            key = f"rate:{user_id}:{datetime.now().strftime('%Y%m%d%H%M')}"
            count = await r.get(key)
            count = int(count) if count else 0
            if count >= PRIVATE_RATE_LIMIT_PER_MINUTE:
                logging.warning(f"Private rate limit exceeded for user {user_id}: {count} requests")
                return False
            await r.incr(key)
            await r.expire(key, 60)
            return True
    finally:
        await r.aclose()

async def check_daily_limit(user_id: int, is_group: bool = False, chat_id: Optional[int] = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    r = await get_redis()
    try:
        if is_group:
            # –î–ª—è –≥—Ä—É–ø–ø: –ª–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            if chat_id is None:
                # Fallback –¥–ª—è callback –∫–Ω–æ–ø–æ–∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                key = f"group_daily_global:{user_id}:{datetime.now().strftime('%Y%m%d')}"
            else:
                key = f"group_daily:{user_id}:{chat_id}:{datetime.now().strftime('%Y%m%d')}"
            
            count = await r.get(key)
            count = int(count) if count else 0
            if count >= GROUP_DAILY_LIMIT:
                logging.warning(f"Group daily limit exceeded for user {user_id} in chat {chat_id}: {count} requests")
                return False
            await r.incr(key)
            await r.expire(key, 86400)
            return True
        else:
            # –î–ª—è –õ–°: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ env
            key = f"daily:{user_id}:{datetime.now().strftime('%Y%m%d')}"
            count = await r.get(key)
            count = int(count) if count else 0
            if count >= PRIVATE_DAILY_LIMIT:
                logging.warning(f"Private daily limit exceeded for user {user_id}: {count} requests")
                return False
            await r.incr(key)
            await r.expire(key, 86400)
            return True
    finally:
        await r.aclose()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    is_admin = user_id == ADMIN_ID
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /start
    logging.warning(f"Command /start called by user {user_id}, message text: '{message.text}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ /start
    if message.text and len(message.text.split()) > 1:
        param = message.text.split()[1]
        logging.warning(f"Deep link parameter detected: '{param}' by user {user_id}")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        try:
            decoded_param = unquote(param)
            logging.warning(f"Decoded parameter: '{decoded_param}' by user {user_id}")
        except Exception as e:
            decoded_param = param  # Fallback –µ—Å–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            logging.warning(f"Parameter decode failed: {e}, using original: '{param}' by user {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ deep link –∫–æ–º–∞–Ω–¥—ã
        if decoded_param.startswith("full_"):
            # –≠—Ç–æ –∑–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: /start full_domain.com
            domain_part = decoded_param[5:]  # –£–±–∏—Ä–∞–µ–º "full_"
            domain = extract_domain(domain_part)
            if domain:
                logging.warning(f"Deep link full report activated for domain {domain} by user {user_id}")
                try:
                    await message.answer(f"üìÑ <b>–ü–æ–ª—É—á–∞—é –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è {domain}...</b>")
                    logging.warning(f"Sent full report message for {domain} to user {user_id}")
                    # –í—ã–∑—ã–≤–∞–µ–º handle_domain_logic —Å full —Ä–µ–∂–∏–º–æ–º
                    await handle_domain_logic(message, domain, short_mode=False)
                    logging.warning(f"Completed handle_domain_logic (full) for {domain} by user {user_id}")
                except Exception as e:
                    logging.error(f"Error in full report processing for {domain} by user {user_id}: {e}")
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                return
            else:
                logging.warning(f"Failed to extract domain from full deep link param: {domain_part}")
                await message.answer(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω –≤ –ø–æ–ª–Ω–æ–º –æ—Ç—á–µ—Ç–µ: {domain_part}")
                return
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –¥–æ–º–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ (–∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç)
        elif "." in decoded_param and len(decoded_param) > 3:
            # –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–æ–º–µ–Ω - –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –õ–°
            domain = extract_domain(decoded_param)
            if domain:
                logging.warning(f"Deep link activated for domain {domain} by user {user_id}")
                try:
                    await message.answer(f"üîç <b>–ü–æ–ª—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {domain}...</b>")
                    logging.warning(f"Sent short report message for {domain} to user {user_id}")
                    # –í—ã–∑—ã–≤–∞–µ–º handle_domain_logic —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    await handle_domain_logic(message, domain, short_mode=True)
                    logging.warning(f"Completed handle_domain_logic (short) for {domain} by user {user_id}")
                except Exception as e:
                    logging.error(f"Error in short report processing for {domain} by user {user_id}: {e}")
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                return
            else:
                logging.warning(f"Failed to extract domain from deep link param: {decoded_param}")
                await message.answer(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω: {decoded_param}")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–º–µ–Ω –±–µ–∑ —Ç–æ—á–∫–∏ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç)
        else:
            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –¥–æ–º–µ–Ω –¥–∞–∂–µ –∏–∑ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            domain = extract_domain(decoded_param)
            if domain:
                logging.warning(f"Deep link activated for short domain {domain} by user {user_id}")
                try:
                    await message.answer(f"üîç <b>–ü–æ–ª—É—á–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {domain}...</b>")
                    logging.warning(f"Sent fallback message for {domain} to user {user_id}")
                    await handle_domain_logic(message, domain, short_mode=True)
                    logging.warning(f"Completed handle_domain_logic (fallback) for {domain} by user {user_id}")
                except Exception as e:
                    logging.error(f"Error in fallback processing for {domain} by user {user_id}: {e}")
                    await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                return
            else:
                logging.warning(f"No domain found in parameter '{decoded_param}' by user {user_id}")
    else:
        logging.warning(f"No deep link parameter found, showing welcome message to user {user_id}")
    
    welcome_message = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–æ–≤ –Ω–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è Reality.\n\n"
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/mode ‚Äî –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ (–∫—Ä–∞—Ç–∫–∏–π/–ø–æ–ª–Ω—ã–π)\n"
        "/history ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫\n"

    )
    if is_admin:
        admin_commands = [
            "/reset_queue ‚Äî –°–±—Ä–æ—Å–∏—Ç—å –æ—á–µ—Ä–µ–¥—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)",
            "/clearcache ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            "/adminhelp ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"
        ]
        if SAVE_APPROVED_DOMAINS:
            admin_commands.extend([
                "/approved ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤",
                "/clear_approved ‚Äî –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤", 
                "/export_approved ‚Äî –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –≤ —Ñ–∞–π–ª"
            ])
        
        welcome_message += (
            "\nüîß <b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n" + 
            "\n".join(admin_commands) + "\n"
        )
    welcome_message += (
        "\nüì© –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –¥–æ–º–µ–Ω –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>google.com</code> \n"
        "\nüì© –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–º–µ–Ω–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏), –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>example.com, google.com</code>\n"
        "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç 100 –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏ –ò–ò –∏ –ø—Ä–æ–µ–∫—Ç–∞ OpeNode.xyz\n\n"
         "üöÄ –ò–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ!\n"
    )
    try:
        await message.answer(welcome_message, reply_markup=get_main_keyboard(is_admin))
    except Exception as e:
        logging.error(f"Failed to send welcome message to user {user_id}: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_bulk_domains_in_group(message: types.Message, domains: list, user_id: int, short_mode: bool):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–º–µ–Ω–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö - –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    # –õ–æ–≥–∏—Ä—É–µ–º –º–∞—Å—Å–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    await log_analytics("bulk_domain_request", user_id, 
                       details=f"group_chat, domains_count={len(domains)}, short_mode={short_mode}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à–µ
    r = await get_redis()
    try:
        cached_domains = []
        pending_domains = []
        
        for domain in domains:
            cached = await r.get(f"result:{domain}")
            if cached:
                cached_domains.append(domain)
            else:
                pending_domains.append(domain)
        
        # –°—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å —Ç–µ –¥–æ–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ
        for domain in pending_domains:
            chat_id = message.chat.id
            message_id = message.message_id
            thread_id = get_topic_thread_id(message)
            
            enqueued = await enqueue(domain, user_id, short_mode=short_mode,
                                   chat_id=chat_id, message_id=message_id, thread_id=thread_id)
            await log_analytics("domain_check", user_id,
                              domain=domain, check_type="short" if short_mode else "full",
                              result_status="queued" if enqueued else "already_queued")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –õ–°
        buttons = []
        bot_info = await bot.get_me()
        bot_username = bot_info.username
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–æ–º–µ–Ω—ã –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 3 –¥–ª—è –∫–Ω–æ–ø–æ–∫
        for i in range(0, len(domains), 3):
            batch = domains[i:i+3]
            row = []
            for domain in batch:
                # –ü—Ä–æ—Å—Ç–æ–π –¥–∏–ø–ª–∏–Ω–∫ - /start domain (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –õ–°)
                deep_link = f"https://t.me/{bot_username}?start={quote(domain)}"
                row.append(InlineKeyboardButton(
                    text=f"üìÑ {domain}", 
                    url=deep_link
                ))
            buttons.append(row)
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã" - –æ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –õ–°
        if len(domains) > 1:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            response_text = (
                f"üîç <b>–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ {len(domains)} –¥–æ–º–µ–Ω–æ–≤</b>\n\n"
                f"üí° –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –õ–° —Å –±–æ—Ç–æ–º:"
            )
        else:
            # –î–ª—è –æ–¥–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            response_text = (
                f"üîç <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(domains)} –¥–æ–º–µ–Ω–æ–≤</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b>\n"
                f"‚Ä¢ –ò–∑ –∫—ç—à–∞: {len(cached_domains)}\n"
                f"‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {len(pending_domains)}\n\n"
                f"üí° <b>–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
                f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –õ–° —Å –±–æ—Ç–æ–º"
            )
            
            if cached_domains:
                response_text += f"\n\n‚úÖ <b>–ì–æ—Ç–æ–≤—ã–µ:</b> {', '.join(cached_domains[:5])}"
                if len(cached_domains) > 5:
                    response_text += f" –∏ –µ—â—ë {len(cached_domains) - 5}..."
            
            if pending_domains:
                response_text += f"\n\n‚è≥ <b>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ:</b> {', '.join(pending_domains[:5])}"
                if len(pending_domains) > 5:
                    response_text += f" –∏ –µ—â—ë {len(pending_domains) - 5}..."
        
        sent_message = await send_topic_aware_message(message, response_text, reply_markup=keyboard)
        
    except Exception as e:
        logging.error(f"Failed to handle bulk domains in group: {e}")
        await send_topic_aware_message(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    finally:
        await r.aclose()

async def handle_deep_link_single_result(message: types.Message, domain: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ deep link"""
    user_id = message.from_user.id
    
    r = await get_redis()
    try:
        cached = await r.get(f"result:{domain}")
        if cached:
            await message.answer(f"üìÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {domain}:</b>\n\n{cached}")
            await log_analytics("domain_check", user_id,
                              domain=domain, check_type="single_result",
                              result_status="cached", execution_time=0)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–º–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            pending_keys = await r.keys(f"pending:{domain}:*")
            
            if pending_keys:
                await message.answer(
                    f"‚è≥ <b>–î–æ–º–µ–Ω {domain} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è</b>\n\n"
                    f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n"
                    f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10-30 —Å–µ–∫—É–Ω–¥."
                )
            else:
                await message.answer(
                    f"‚ùå <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {domain} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    f"üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
                    f"‚Ä¢ –î–æ–º–µ–Ω –µ—â—ë –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è\n"
                    f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞—Ä–µ–ª –∏ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞ (24 —á–∞—Å–∞)\n"
                    f"‚Ä¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ\n\n"
                    f"üîÑ <b>–†–µ—à–µ–Ω–∏–µ:</b> –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–Ω–æ–≤–æ:\n"
                    f"<code>/check {domain}</code>"
                )
    except Exception as e:
        logging.error(f"Failed to get single result for {domain} by user {user_id}: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {domain}: {str(e)}")
    finally:
        await r.aclose()

async def handle_deep_link_all_results(message: types.Message, user_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ deep link"""
    r = await get_redis()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history = await r.lrange(f"history:{user_id}", 0, 19)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
        
        if not history:
            await message.answer("üìú –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫.")
            return
        
        results_text = "üìÑ <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n"
        found_results = 0
        
        for entry in history:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            domain = None
            if " - " in entry:
                domain = entry.split(" - ")[1].strip()
            elif ": " in entry:
                domain = entry.split(": ")[0].strip()
            
            if domain:
                cached = await r.get(f"result:{domain}")
                if cached:
                    found_results += 1
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –∫–æ—Ä–æ—Ç–∫–æ–π –≤–µ—Ä—Å–∏–µ–π
                    lines = cached.split("\n")[:10]  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Å—Ç—Ä–æ–∫
                    short_result = "\n".join(lines)
                    if len(cached.split("\n")) > 10:
                        short_result += "\n<i>... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫)</i>"
                    
                    results_text += f"üîç <b>{domain}:</b>\n{short_result}\n\n"
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    if found_results >= 3:  # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 3 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                        break
        
        if found_results == 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à–µ
            all_cached_keys = await r.keys("result:*")
            available_domains = []
            for key in all_cached_keys:
                domain_name = key.decode('utf-8').replace('result:', '') if hasattr(key, 'decode') else str(key).replace('result:', '')
                available_domains.append(domain_name)
            
            if available_domains:
                domains_text = ", ".join(available_domains[:10])
                if len(available_domains) > 10:
                    domains_text += f" –∏ –µ—â—ë {len(available_domains) - 10}..."
                
                await message.answer(
                    f"üìú –í–∞—à–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏, –Ω–æ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
                    f"üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã:</b> {domains_text}\n\n"
                    f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/check –¥–æ–º–µ–Ω</code> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
                )
            else:
                await message.answer("üìú –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–∏—Ö –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫—ç—à–µ.")
        else:
            if len(results_text) > 4000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                results_text = results_text[:3900] + "\n\n<i>... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)</i>"
            
            await message.answer(results_text)
            
        await log_analytics("all_results_requested", user_id, details=f"found={found_results}")
        
    except Exception as e:
        logging.error(f"Failed to get all results for user {user_id}: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")
    finally:
        await r.aclose()

async def handle_deep_link_full_report(message: types.Message, domain: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ —á–µ—Ä–µ–∑ deep link"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    if not await check_rate_limit(user_id, is_group=False):
        await message.answer("üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ù–µ –±–æ–ª–µ–µ 10 –≤ –º–∏–Ω—É—Ç—É.")
        return
        
    if not await check_daily_limit(user_id, is_group=False):
        await message.answer("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç (100 –ø—Ä–æ–≤–µ—Ä–æ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    r = await get_redis()
    try:
        cached = await r.get(f"result:{domain}")
        if cached and all(k in cached for k in ["üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "üìÑ WHOIS", "‚è±Ô∏è TTFB"]):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –∏–∑ –∫—ç—à–∞
            await message.answer(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è {domain}:\n\n{cached}")
            await log_analytics("domain_check", user_id,
                              domain=domain, check_type="full",
                              result_status="cached", execution_time=0)
        else:
            # –°—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç
            enqueued = await enqueue(domain, user_id, short_mode=False, chat_id=user_id)
            if enqueued:
                await message.answer(f"‚úÖ <b>{domain}</b> –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞.")
                await log_analytics("domain_check", user_id,
                                  domain=domain, check_type="full",
                                  result_status="queued", execution_time=0)
            else:
                await message.answer(f"‚ö†Ô∏è <b>{domain}</b> —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    except Exception as e:
        logging.error(f"Failed to process deep link full report for {domain} by user {user_id}: {str(e)}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {domain}: {str(e)}")
    finally:
        await r.aclose()

@router.message(Command("mode"))
async def cmd_mode(message: types.Message):
    user_id = message.from_user.id
    r = await get_redis()
    try:
        current_mode = await r.get(f"mode:{user_id}")
        current_mode = current_mode or "short"
        new_mode = "full" if current_mode == "short" else "short"
        await r.set(f"mode:{user_id}", new_mode)
        await message.reply(f"‚úÖ –†–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_mode}")
    except Exception as e:
        logging.error(f"Failed to change mode for user {user_id}: {str(e)}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞.")
    finally:
        await r.aclose()


@router.message(Command("history"))
async def cmd_history(message: types.Message):
    user_id = message.from_user.id
    r = await get_redis()
    try:
        history = await r.lrange(f"history:{user_id}", 0, 9)
        if not history:
            await message.reply("üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—É—Å—Ç–∞.")
            return
        response = "üìú <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–∞–∫—Å–∏–º—É–º 10):</b>\n"
        for i, entry in enumerate(history, 1):
            response += f"{i}. {entry}\n"
        await message.reply(response)
    except Exception as e:
        logging.error(f"Failed to fetch history for user {user_id}: {str(e)}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")
    finally:
        await r.aclose()

@router.message(Command("approved"))
async def cmd_approved(message: types.Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.reply("‚õî –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        logging.warning(f"User {user_id} attempted to access /approved")
        return
    if not SAVE_APPROVED_DOMAINS:
        await message.reply("‚õî –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    r = await get_redis()
    try:
        domains = await r.smembers("approved_domains")
        if not domains:
            await message.reply("üìú –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –ø—É—Å—Ç.")
            return
        response = "üìú <b>–ü—Ä–∏–≥–æ–¥–Ω—ã–µ –¥–æ–º–µ–Ω—ã:</b>\n"
        for i, domain in enumerate(sorted(domains), 1):
            response += f"{i}. {domain}\n"
        await message.reply(response)
    except Exception as e:
        logging.error(f"Failed to fetch approved domains for user {user_id}: {str(e)}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤.")
    finally:
        await r.aclose()

@router.message(Command("clear_approved"))
async def cmd_clear_approved(message: types.Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.reply("‚õî –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        logging.warning(f"User {user_id} attempted to access /clear_approved")
        return
    if not SAVE_APPROVED_DOMAINS:
        await message.reply("‚õî –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    r = await get_redis()
    try:
        deleted = await r.delete("approved_domains")
        await message.reply("‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –æ—á–∏—â–µ–Ω." if deleted else "üìú –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ —É–∂–µ –ø—É—Å—Ç.")
    except Exception as e:
        logging.error(f"Failed to clear approved domains for user {user_id}: {str(e)}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤.")
    finally:
        await r.aclose()

@router.message(Command("export_approved"))
async def cmd_export_approved(message: types.Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.reply("‚õî –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        logging.warning(f"User {user_id} attempted to access /export_approved")
        return
    if not SAVE_APPROVED_DOMAINS:
        await message.reply("‚õî –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return
    r = await get_redis()
    try:
        domains = await r.smembers("approved_domains")
        if not domains:
            await message.reply("üìú –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –ø—É—Å—Ç. –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
            return
        file_path = "/app/approved_domains.txt"
        with open(file_path, "w") as f:
            for domain in sorted(domains):
                f.write(f"{domain}\n")
        await message.reply(f"‚úÖ –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {file_path} ({len(domains)} –¥–æ–º–µ–Ω–æ–≤).")
    except Exception as e:
        logging.error(f"Failed to export approved domains for user {user_id}: {str(e)}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤: {str(e)}")
    finally:
        await r.aclose()

@router.message(Command("reset_queue"))
async def reset_queue_command(message: types.Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.reply("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logging.warning(f"Non-admin user {user_id} attempted to reset queue")
        return
    r = await get_redis()
    try:
        queue_count = await r.llen("queue:domains")
        pending_keys = await r.keys("pending:*")
        await r.delete("queue:domains")
        if pending_keys:
            await r.delete(*pending_keys)
        await message.reply(f"‚úÖ –û—á–µ—Ä–µ–¥—å —Å–±—Ä–æ—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {queue_count}, –∫–ª—é—á–µ–π pending: {len(pending_keys)}.")
    except Exception as e:
        logging.error(f"Failed to reset queue by admin {user_id}: {str(e)}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –æ—á–µ—Ä–µ–¥–∏.")
    finally:
        await r.aclose()

@router.message(Command("clearcache"))
async def clear_cache_command(message: types.Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.reply("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logging.warning(f"Non-admin user {user_id} attempted to access /clearcache")
        return
    r = await get_redis()
    try:
        keys = await r.keys("result:*")
        if keys:
            await r.delete(*keys)
            await message.reply(f"‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ {len(keys)} –∑–∞–ø–∏—Å–µ–π.")
        else:
            await message.reply("‚úÖ –ö—ç—à —É–∂–µ –ø—É—Å—Ç.")
    except Exception as e:
        logging.error(f"Failed to clear cache for user {user_id}: {str(e)}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {str(e)}")
    finally:
        await r.aclose()

@router.message(Command("adminhelp"))
async def admin_help_command(message: types.Message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.reply("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logging.warning(f"Non-admin user {user_id} attempted to access /adminhelp")
        return
    admin_commands = ["üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"]
    admin_commands.extend([
        "/reset_queue ‚Äî –°–±—Ä–æ—Å–∏—Ç—å –æ—á–µ—Ä–µ–¥—å",
        "/clearcache ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        "/analytics ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –±–æ—Ç–∞ (NEW!)",
        "/groups ‚Äî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ (NEW!)",
        "/groups_add &lt;ID&gt; ‚Äî –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ",
        "/groups_remove &lt;ID&gt; ‚Äî –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö", 
        "/groups_current ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã",
        "/adminhelp ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    ])
    
    if SAVE_APPROVED_DOMAINS:
        admin_commands.extend([
            "/approved ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤",
            "/clear_approved ‚Äî –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤",
            "/export_approved ‚Äî –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ –≤ —Ñ–∞–π–ª"
        ])
    
    await message.reply("\n".join(admin_commands))
    logging.info(f"Admin {user_id} viewed admin commands list")

@router.message(Command("analytics"))
async def analytics_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.reply("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logging.warning(f"Non-admin user {user_id} attempted to access /analytics")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    if not ANALYTICS_AVAILABLE:
        await message.reply("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (redis).")
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
    if not analytics_collector:
        await message.reply("‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Redis.\n\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –ó–∞–ø—É—â–µ–Ω –ª–∏ Redis —Å–µ—Ä–≤–µ—Ä\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è REDIS_HOST, REDIS_PORT")
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
        report = await analytics_collector.generate_analytics_report(user_id)
        await message.reply(report)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        await log_analytics("analytics_requested", user_id)
        logging.info(f"Admin {user_id} requested analytics report")
        
    except Exception as e:
        logging.error(f"Failed to generate analytics for user {user_id}: {str(e)}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}\n\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Redis\n‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")

@router.message(Command("groups"))
async def groups_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = message.from_user.id
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logging.info(f"Groups command called by user {user_id}, ADMIN_ID={ADMIN_ID}")
    
    if user_id != ADMIN_ID:
        await message.reply(f"‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\nüêõ –û—Ç–ª–∞–¥–∫–∞: –≤–∞—à ID={user_id}, ADMIN_ID={ADMIN_ID}")
        logging.warning(f"Non-admin user {user_id} attempted to access /groups")
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    if not GROUP_MODE_ENABLED:
        await message.reply("‚ÑπÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω (GROUP_MODE_ENABLED=false)")
        return
    
    if not AUTHORIZED_GROUPS:
        status = "üåê <b>–†–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø:</b> –û—Ç–∫—Ä—ã—Ç—ã–π (–ª—é–±—ã–µ –≥—Ä—É–ø–ø—ã)\n"
    else:
        status = f"üîí <b>–†–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø:</b> –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π ({len(AUTHORIZED_GROUPS)} –≥—Ä—É–ø–ø)\n"
        status += "üìã <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:</b>\n"
        for group_id in sorted(AUTHORIZED_GROUPS):
            try:
                chat = await bot.get_chat(group_id)
                group_name = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                status += f"‚Ä¢ {group_name} (<code>{group_id}</code>)\n"
            except Exception:
                status += f"‚Ä¢ ID: <code>{group_id}</code> (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)\n"
    
    status += f"\n‚öôÔ∏è <b>–ê–≤—Ç–æ–≤—ã—Ö–æ–¥:</b> {'–í–∫–ª—é—á–µ–Ω' if AUTO_LEAVE_UNAUTHORIZED else '–û—Ç–∫–ª—é—á–µ–Ω'}\n"
    status += f"üîß <b>–ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥:</b> <code>{GROUP_COMMAND_PREFIX}</code>\n\n"
    
    status += "üìã <b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
    status += "/groups_add &lt;ID&gt; ‚Äî –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É\n"
    status += "/groups_remove &lt;ID&gt; ‚Äî –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É\n"
    status += "/groups_current ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã\n"
    
    await message.reply(status)

@router.message(Command("groups_add"))
async def groups_add_command(message: types.Message):
    """–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö"""
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.reply("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split()
    if len(command_parts) < 2:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã: /groups_add -1001234567890")
        return
    
    try:
        group_id = int(command_parts[1])
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å (—Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
    AUTHORIZED_GROUPS.add(group_id)
    
    try:
        chat = await bot.get_chat(group_id)
        group_name = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        await message.reply(f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' (ID: <code>{group_id}</code>) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.\n\n‚ö†Ô∏è –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é AUTHORIZED_GROUPS –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
    except Exception as e:
        await message.reply(f"‚úÖ ID <code>{group_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ: {e}\n\n‚ö†Ô∏è –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é AUTHORIZED_GROUPS –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")

@router.message(Command("groups_remove"))
async def groups_remove_command(message: types.Message):
    """–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö"""
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.reply("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    command_parts = message.text.split()
    if len(command_parts) < 2:
        await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã: /groups_remove -1001234567890")
        return
    
    try:
        group_id = int(command_parts[1])
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≥—Ä—É–ø–ø—ã. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
        return
    
    if group_id in AUTHORIZED_GROUPS:
        AUTHORIZED_GROUPS.remove(group_id)
        await message.reply(f"‚úÖ ID <code>{group_id}</code> —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.\n\n‚ö†Ô∏è –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é AUTHORIZED_GROUPS –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")
    else:
        await message.reply(f"‚ùå ID <code>{group_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")

@router.message(Command("groups_current"))
async def groups_current_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã"""
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.reply("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    if is_group_chat(message):
        chat_id = message.chat.id
        is_authorized = is_authorized_group(chat_id)
        status_emoji = "‚úÖ" if is_authorized else "‚ùå"
        status_text = "–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞" if is_authorized else "–ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞"
        
        await message.reply(
            f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:</b>\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title}\n"
            f"üÜî ID: <code>{chat_id}</code>\n"
            f"{status_emoji} –°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            f"üí° –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: /groups_add {chat_id}"
        )
    else:
        await message.reply("‚ÑπÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö. ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>" + str(message.chat.id) + "</code>")

@router.message(Command("check", "full"))
async def cmd_check(message: types.Message):
    user_id = message.from_user.id
    command_text = message.text.strip()
    command = command_text.split()[0]
    short_mode = command == "/check"
    args = command_text[len(command):].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
    if is_group_chat(message) and not await should_respond_in_group(message):
        return
    
    if not args:
        response = f"‚õî –£–∫–∞–∂–∏ –¥–æ–º–µ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä: {command} example.com"
        if is_group_chat(message):
            response += f"\n\nüí° –í –≥—Ä—É–ø–ø–∞—Ö —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {GROUP_COMMAND_PREFIX}check example.com"
        await send_topic_aware_message(message, response)
        return
        
    is_group = is_group_chat(message)
    chat_id = message.chat.id if is_group else None
    if not await check_rate_limit(user_id, is_group=is_group, chat_id=chat_id):
        if is_group:
            await send_topic_aware_message(message, f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. –ù–µ –±–æ–ª–µ–µ 1 –∑–∞–ø—Ä–æ—Å–∞ –≤ {GROUP_RATE_LIMIT_MINUTES} –º–∏–Ω—É—Ç.")
        else:
            await send_topic_aware_message(message, f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ù–µ –±–æ–ª–µ–µ {PRIVATE_RATE_LIMIT_PER_MINUTE} –≤ –º–∏–Ω—É—Ç—É.")
        return
        
    if not await check_daily_limit(user_id, is_group=is_group, chat_id=chat_id):
        if is_group:
            await send_topic_aware_message(message, f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ ({GROUP_DAILY_LIMIT} –ø—Ä–æ–≤–µ—Ä–æ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        else:
            await send_topic_aware_message(message, "üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç (100 –ø—Ä–æ–≤–µ—Ä–æ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return
        
    await log_analytics("command_used", user_id, details=f"{command} {args}")
    await handle_domain_logic(message, args, short_mode=short_mode)
    logging.info(f"User {user_id} executed {command} with args: {args}")

@router.message()
async def handle_domain(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
    if is_group_chat(message) and GROUP_MODE_ENABLED and text.startswith(GROUP_COMMAND_PREFIX):
        await handle_group_commands(message)
        return
    
    # –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç
    if is_group_chat(message) and not await should_respond_in_group(message):
        return
    
    if not text or text.startswith("/"):
        return
        
    is_group = is_group_chat(message)
    chat_id = message.chat.id if is_group else None
    if not await check_rate_limit(user_id, is_group=is_group, chat_id=chat_id):
        if is_group:
            await message.reply(f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. –ù–µ –±–æ–ª–µ–µ 1 –∑–∞–ø—Ä–æ—Å–∞ –≤ {GROUP_RATE_LIMIT_MINUTES} –º–∏–Ω—É—Ç.")
        else:
            await message.reply(f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ù–µ –±–æ–ª–µ–µ {PRIVATE_RATE_LIMIT_PER_MINUTE} –≤ –º–∏–Ω—É—Ç—É.")
        return
        
    if not await check_daily_limit(user_id, is_group=is_group, chat_id=chat_id):
        if is_group:
            await message.reply(f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ ({GROUP_DAILY_LIMIT} –ø—Ä–æ–≤–µ—Ä–æ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        else:
            await message.reply(f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({PRIVATE_DAILY_LIMIT} –ø—Ä–æ–≤–µ—Ä–æ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return
        
    await log_analytics("domain_message", user_id, details=text)
    await handle_domain_logic(message, text, short_mode=True)

async def handle_group_commands(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–∞—Ö —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º"""
    text = message.text or ""
    if not text.startswith(GROUP_COMMAND_PREFIX):
        return
        
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    command_without_prefix = text[len(GROUP_COMMAND_PREFIX):]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã
    if command_without_prefix.startswith("check ") or command_without_prefix == "check":
        short_mode = True
        args = command_without_prefix[5:].strip() if len(command_without_prefix) > 5 else ""
    elif command_without_prefix.startswith("full ") or command_without_prefix == "full":
        short_mode = False
        args = command_without_prefix[4:].strip() if len(command_without_prefix) > 4 else ""
    elif command_without_prefix.startswith("help") or command_without_prefix == "help":
        await handle_group_help(message)
        return
    else:
        # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–º–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if extract_domain(command_without_prefix):
            short_mode = True
            args = command_without_prefix
        else:
            return
    
    user_id = message.from_user.id
    
    if not args:
        await send_topic_aware_message(message,
            f"‚õî –£–∫–∞–∂–∏ –¥–æ–º–µ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä: {GROUP_COMMAND_PREFIX}check example.com\n"
            f"üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"‚Ä¢ {GROUP_COMMAND_PREFIX}check example.com ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
            f"‚Ä¢ {GROUP_COMMAND_PREFIX}full example.com ‚Äî –ø–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n"
            f"‚Ä¢ {GROUP_COMMAND_PREFIX}help ‚Äî –ø–æ–º–æ—â—å"
        )
        return
        
    if not await check_rate_limit(user_id, is_group=True, chat_id=message.chat.id):
        await send_topic_aware_message(message, f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ. –ù–µ –±–æ–ª–µ–µ 1 –∑–∞–ø—Ä–æ—Å–∞ –≤ {GROUP_RATE_LIMIT_MINUTES} –º–∏–Ω—É—Ç.")
        return
        
    if not await check_daily_limit(user_id, is_group=True, chat_id=message.chat.id):
        await send_topic_aware_message(message, f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ ({GROUP_DAILY_LIMIT} –ø—Ä–æ–≤–µ—Ä–æ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return
    
    await log_analytics("group_command_used", user_id, details=f"{command_without_prefix}")
    await handle_domain_logic(message, args, short_mode=short_mode)
    
async def handle_group_help(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
    bot_info = await bot.get_me()
    help_text = (
        f"ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>\n\n"
        f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ:</b>\n"
        f"‚Ä¢ {GROUP_COMMAND_PREFIX}check example.com ‚Äî –ö—Ä–∞—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞\n"
        f"‚Ä¢ {GROUP_COMMAND_PREFIX}full example.com ‚Äî –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞\n"
        f"‚Ä¢ {GROUP_COMMAND_PREFIX}help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        f"üí° <b>–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ:</b>\n"
        f"‚Ä¢ –£–ø–æ–º—è–Ω—É—Ç—å –±–æ—Ç–∞: @{bot_info.username} example.com\n"
        f"‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –¥–æ–º–µ–Ω–æ–º\n\n"
        f"üìä –õ–∏–º–∏—Ç—ã: {PRIVATE_RATE_LIMIT_PER_MINUTE} –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –º–∏–Ω—É—Ç—É, {PRIVATE_DAILY_LIMIT} –≤ –¥–µ–Ω—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        f"üßµ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–º:</b> –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–æ–π –∂–µ —Ç–µ–º–µ, –≥–¥–µ –µ–≥–æ —É–ø–æ–º—è–Ω—É–ª–∏"
    )
    await send_topic_aware_message(message, help_text)

@router.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    is_admin = user_id == ADMIN_ID
    if callback_query.data == "check":
        await callback_query.message.answer("‚õî –£–∫–∞–∂–∏ –¥–æ–º–µ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä: /check example.com")
    elif callback_query.data == "full":
        await callback_query.message.answer("‚õî –£–∫–∞–∂–∏ –¥–æ–º–µ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä: /full example.com")
    elif callback_query.data == "ping":
        await callback_query.message.answer("üèì –Ø –∂–∏–≤!")
    elif callback_query.data == "mode":
        r = await get_redis()
        try:
            current_mode = await r.get(f"mode:{user_id}")
            current_mode = current_mode or "short"
            new_mode = "full" if current_mode == "short" else "short"
            await r.set(f"mode:{user_id}", new_mode)
            await callback_query.message.reply(f"‚úÖ –†–µ–∂–∏–º –≤—ã–≤–æ–¥–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_mode}")
        except Exception as e:
            logging.error(f"Failed to change mode for user {user_id} via callback: {str(e)}")
            await callback_query.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞.")
        finally:
            await r.aclose()
    elif callback_query.data == "history":
        r = await get_redis()
        try:
            history = await r.lrange(f"history:{user_id}", 0, 9)
            if not history:
                await callback_query.message.reply("üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—É—Å—Ç–∞.")
            else:
                response = "üìú <b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–∞–∫—Å–∏–º—É–º 10):</b>\n"
                for i, entry in enumerate(history, 1):
                    response += f"{i}. {entry}\n"
                await callback_query.message.reply(response)
        except Exception as e:
            logging.error(f"Failed to fetch history for user {user_id}: {str(e)}")
            await callback_query.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")
        finally:
            await r.aclose()
    elif callback_query.data == "approved" and is_admin:
        if not SAVE_APPROVED_DOMAINS:
            await callback_query.message.reply("‚õî –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        else:
            r = await get_redis()
            try:
                domains = await r.smembers("approved_domains")
                if not domains:
                    await callback_query.message.reply("üìú –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –ø—É—Å—Ç.")
                else:
                    response = "üìú <b>–ü—Ä–∏–≥–æ–¥–Ω—ã–µ –¥–æ–º–µ–Ω—ã:</b>\n"
                    for i, domain in enumerate(sorted(domains), 1):
                        response += f"{i}. {domain}\n"
                    await callback_query.message.reply(response)
            except Exception as e:
                logging.error(f"Failed to fetch approved domains for user {user_id}: {str(e)}")
                await callback_query.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤.")
            finally:
                await r.aclose()
            
    elif callback_query.data == "clearcache" and is_admin:
        r = await get_redis()
        try:
            keys = await r.keys("result:*")
            if keys:
                await r.delete(*keys)
                await callback_query.message.reply(f"‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ {len(keys)} –∑–∞–ø–∏—Å–µ–π.")
            else:
                await callback_query.message.reply("‚úÖ –ö—ç—à —É–∂–µ –ø—É—Å—Ç.")
        except Exception as e:
            logging.error(f"Failed to clear cache via callback for user {user_id}: {str(e)}")
            await callback_query.message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {str(e)}")
        finally:
            await r.aclose()

    elif callback_query.data == "clear_approved" and is_admin:
        if not SAVE_APPROVED_DOMAINS:
            await callback_query.message.reply("‚õî –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        else:
            r = await get_redis()
            try:
                deleted = await r.delete("approved_domains")
                await callback_query.message.reply("‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –æ—á–∏—â–µ–Ω." if deleted else "üìú –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ —É–∂–µ –ø—É—Å—Ç.")
            except Exception as e:
                logging.error(f"Failed to clear approved domains for user {user_id}: {str(e)}")
                await callback_query.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤.")
            finally:
                await r.aclose()
    elif callback_query.data == "export_approved" and is_admin:
        if not SAVE_APPROVED_DOMAINS:
            await callback_query.message.reply("‚õî –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        else:
            r = await get_redis()
            try:
                domains = await r.smembers("approved_domains")
                if not domains:
                    await callback_query.message.reply("üìú –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–æ–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –ø—É—Å—Ç. –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                else:
                    file_path = "/app/approved_domains.txt"
                    with open(file_path, "w") as f:
                        for domain in sorted(domains):
                            f.write(f"{domain}\n")
                    await callback_query.message.reply(f"‚úÖ –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {file_path} ({len(domains)} –¥–æ–º–µ–Ω–æ–≤).")
            except Exception as e:
                logging.error(f"Failed to export approved domains for user {user_id}: {str(e)}")
                await callback_query.message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤: {str(e)}")
            finally:
                await r.aclose()
    elif callback_query.data == "reset_queue" and is_admin:
        r = await get_redis()
        try:
            queue_count = await r.llen("queue:domains")
            pending_keys = await r.keys("pending:*")
            await r.delete("queue:domains")
            if pending_keys:
                await r.delete(*pending_keys)
            await callback_query.message.reply(f"‚úÖ –û—á–µ—Ä–µ–¥—å —Å–±—Ä–æ—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞—á: {queue_count}, –∫–ª—é—á–µ–π pending: {len(pending_keys)}.")
        except Exception as e:
            logging.error(f"Failed to reset queue by admin {user_id}: {str(e)}")
            await callback_query.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –æ—á–µ—Ä–µ–¥–∏.")
        finally:
            await r.aclose()
    elif callback_query.data.startswith("full_report:"):
        domain = callback_query.data.split(":", 1)[1]
        r = await get_redis()
        try:
            cached = await r.get(f"result:{domain}")
            if cached and all(k in cached for k in ["üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "üìÑ WHOIS", "‚è±Ô∏è TTFB"]):
                await callback_query.message.answer(f"‚ö° –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è {domain}:\n\n{cached}")
            else:
                if not await check_rate_limit(user_id):
                    await callback_query.message.answer("üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ù–µ –±–æ–ª–µ–µ 10 –≤ –º–∏–Ω—É—Ç—É.")
                elif not await check_daily_limit(user_id):
                    await callback_query.message.answer("üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç (100 –ø—Ä–æ–≤–µ—Ä–æ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
                else:
                    # –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–°, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∏–∑ –≥—Ä—É–ø–ø—ã
                    enqueued = await enqueue(domain, user_id, short_mode=False, 
                                           chat_id=user_id)  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤ –õ–°
                    if enqueued:
                        await callback_query.message.answer(f"‚úÖ <b>{domain}</b> –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –õ–°.")
                    else:
                        await callback_query.message.answer(f"‚ö†Ô∏è <b>{domain}</b> —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        except Exception as e:
            logging.error(f"Failed to process full report for {domain} by user {user_id}: {str(e)}")
            await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            await r.aclose()
    elif callback_query.data.startswith("full_pm:"):
        # –ù–æ–≤—ã–π callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ –õ–° –∏–∑ –≥—Ä—É–ø–ø—ã
        parts = callback_query.data.split(":", 2)
        if len(parts) >= 3:
            domain = parts[1]
            target_user_id = int(parts[2])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ —ç—Ç–æ—Ç –æ—Ç—á—ë—Ç
            if user_id != target_user_id:
                await callback_query.answer("‚ùå –≠—Ç–æ—Ç –æ—Ç—á—ë—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–µ –¥–ª—è –≤–∞—Å", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã (—ç—Ç–æ callback –∏–∑ –≥—Ä—É–ø–ø—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã)
            # –î–ª—è callback –∫–Ω–æ–ø–æ–∫ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –≥—Ä—É–ø–ø—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            if not await check_rate_limit(user_id, is_group=True, chat_id=None):
                await callback_query.answer(f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ù–µ –±–æ–ª–µ–µ 1 –∑–∞–ø—Ä–æ—Å–∞ –≤ {GROUP_RATE_LIMIT_MINUTES} –º–∏–Ω—É—Ç.", show_alert=True)
                return
            if not await check_daily_limit(user_id, is_group=True, chat_id=None):
                await callback_query.answer(f"üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({GROUP_DAILY_LIMIT} –ø—Ä–æ–≤–µ—Ä–æ–∫). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.", show_alert=True)
                return
            
            r = await get_redis()
            try:
                cached = await r.get(f"result:{domain}")
                if cached and all(k in cached for k in ["üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "üìÑ WHOIS", "‚è±Ô∏è TTFB"]):
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –õ–°
                    try:
                        await bot.send_message(user_id, f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è {domain}:\n\n{cached}")
                        await callback_query.answer("‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –õ–°")
                    except Exception as pm_error:
                        # –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°
                        await callback_query.answer(
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start", 
                            show_alert=True
                        )
                        logging.warning(f"Failed to send PM to user {user_id} via callback: {pm_error}")
                else:
                    # –°—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –õ–°
                    enqueued = await enqueue(domain, user_id, short_mode=False, chat_id=user_id)
                    if enqueued:
                        await callback_query.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥—ë—Ç –≤ –õ–°")
                    else:
                        await callback_query.answer("‚ö†Ô∏è –î–æ–º–µ–Ω —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
            except Exception as e:
                logging.error(f"Failed to process full_pm for {domain} by user {user_id}: {str(e)}")
                await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            finally:
                await r.aclose()
        else:
            await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    else:
        await callback_query.message.reply("‚õî –î–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")
        logging.warning(f"User {user_id} attempted unauthorized callback: {callback_query.data}")
    await callback_query.answer()

async def handle_domain_logic(message: types.Message, input_text: str, inconclusive_domain_limit=5, short_mode: bool = True):
    user_id = message.from_user.id
    logging.warning(f"handle_domain_logic called: user_id={user_id}, input_text='{input_text}', short_mode={short_mode}")
    
    penalty, active = get_penalty(user_id)
    if active:
        logging.warning(f"User {user_id} is under penalty: {penalty//60} minutes")
        await message.reply(f"üö´ –í—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –Ω–∞ {penalty//60} –º–∏–Ω—É—Ç.")
        return

    r = await get_redis()
    try:
        user_mode = await r.get(f"mode:{user_id}")
        short_mode = user_mode != "full" if user_mode else short_mode
    finally:
        await r.aclose()

    domains = [d.strip() for d in re.split(r'[,\n]', input_text) if d.strip()]
    if not domains:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–º–µ–Ω—ã. –£–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–æ–º–µ–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: example.com")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥—Ä—É–ø–ø–æ–≤–æ–π –ª–∏ —ç—Ç–æ —á–∞—Ç
    is_group = is_group_chat(message)
    
    # –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ 1 –¥–æ–º–µ–Ω
    if is_group and len(domains) > 1:
        await send_topic_aware_message(message,
            f"‚ö†Ô∏è <b>–í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 –¥–æ–º–µ–Ω –∑–∞ —Ä–∞–∑</b>\n\n"
            f"üìù –í—ã —É–∫–∞–∑–∞–ª–∏ {len(domains)} –¥–æ–º–µ–Ω–æ–≤: {', '.join(domains[:3])}{'...' if len(domains) > 3 else ''}\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–≤—ã–π –¥–æ–º–µ–Ω: <code>{domains[0]}</code>\n"
            f"üîÑ –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n\n"
            f"üìä <b>–õ–∏–º–∏—Ç—ã –≤ –≥—Ä—É–ø–ø–∞—Ö:</b> 1 –∑–∞–ø—Ä–æ—Å –≤ {GROUP_RATE_LIMIT_MINUTES} –º–∏–Ω—É—Ç, –¥–æ {GROUP_DAILY_LIMIT} –≤ –¥–µ–Ω—å (–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ)"
        )
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –¥–æ–º–µ–Ω
        domains = domains[:1]

    r = await get_redis()
    try:
        valid_domains = []
        invalid_domains = []
        for domain in domains:
            extracted = extract_domain(domain)
            if extracted:
                valid_domains.append(extracted)
            else:
                invalid_domains.append(domain)
                logging.warning(f"Invalid domain input: {domain} by user {user_id}")

        if invalid_domains:
            await send_topic_aware_message(message,
                f"‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–µ –¥–æ–º–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã –∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã:\n" +
                "\n".join(f"- {d}" for d in invalid_domains)
            )

        if not valid_domains:
            if len(invalid_domains) >= inconclusive_domain_limit:
                timeout = register_violation(user_id)
                await send_topic_aware_message(message, f"‚ùå –í—Å–µ –¥–æ–º–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ {timeout//60} –º–∏–Ω—É—Ç.")
            else:
                await send_topic_aware_message(message, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: example.com")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –õ–°
        if is_group:
            # –ü—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å –±–µ–∑ –≤—Å—è–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            for domain in valid_domains:
                chat_id = message.chat.id
                message_id = message.message_id
                thread_id = get_topic_thread_id(message)
                
                await enqueue(domain, user_id, short_mode=short_mode,
                             chat_id=chat_id, message_id=message_id, thread_id=thread_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –õ–°
            try:
                bot_info = await bot.get_me()
                bot_username = bot_info.username
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ - –∫–∞–∂–¥–∞—è –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç /start domain.com –≤ –õ–°
                buttons = []
                for i in range(0, len(valid_domains), 3):
                    batch = valid_domains[i:i+3]
                    row = []
                    for domain in batch:
                        # –ü—Ä–æ—Å—Ç–æ–π –¥–∏–ø–ª–∏–Ω–∫ - /start domain.com (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –õ–°)
                        # URL-–∫–æ–¥–∏—Ä—É–µ–º –¥–æ–º–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
                        deep_link = f"https://t.me/{bot_username}?start={quote(domain)}"
                        row.append(InlineKeyboardButton(text=f"üìÑ {domain}", url=deep_link))
                    buttons.append(row)
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
                
                # –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
                group_message = (
                    f"üîç <b>–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ {len(valid_domains)} –¥–æ–º–µ–Ω–æ–≤</b>\n\n"
                    f"ÔøΩ <b>–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –õ–° —Å –±–æ—Ç–æ–º"
                )
                
                await send_topic_aware_message(message, group_message, reply_markup=keyboard)
                
            except Exception as e:
                logging.error(f"Failed to send group notification for bulk request: {e}")
            
            return
        
        # –ï—Å–ª–∏ –¥–æ–º–µ–Ω–æ–≤ –º–Ω–æ–≥–æ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω BatchProcessor, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (—Ç–æ–ª—å–∫–æ –≤ –õ–°)
        if len(valid_domains) > 2 and PROGRESS_AVAILABLE and not is_group_chat(message):
            try:
                batch_processor = BatchProcessor(bot, batch_size=3, progress_update_delay=0.8)
                
                async def check_domain_wrapper(domain, user_id, short_mode):
                    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
                    start_time = time()
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                        r = await get_redis()
                        cached = await r.get(f"result:{domain}")
                        await r.aclose()
                        
                        if cached:
                            await log_analytics("domain_check", user_id, 
                                              domain=domain, check_type="short" if short_mode else "full", 
                                              result_status="cached", execution_time=time() - start_time)
                            return f"‚úÖ {domain} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞"
                        
                        # –°—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                        chat_id = message.chat.id
                        message_id = message.message_id
                        thread_id = get_topic_thread_id(message)
                        
                        enqueued = await enqueue(domain, user_id, short_mode=short_mode,
                                               chat_id=chat_id, message_id=message_id, thread_id=thread_id)
                        if enqueued:
                            await log_analytics("domain_check", user_id,
                                              domain=domain, check_type="short" if short_mode else "full",
                                              result_status="queued", execution_time=time() - start_time)
                            return f"‚úÖ {domain} - –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å"
                        else:
                            return f"‚ö†Ô∏è {domain} - —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏"
                            
                    except Exception as e:
                        await log_analytics("domain_check", user_id,
                                          domain=domain, check_type="short" if short_mode else "full",
                                          result_status="failed", execution_time=time() - start_time)
                        raise e
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                results = await batch_processor.process_domains(
                    valid_domains, user_id, message, check_domain_wrapper, short_mode
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                summary = (
                    f"üìä <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b>\n"
                    f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results['successful']) + len(results['cached'])}\n"
                    f"‚Ä¢ –ò–∑ –∫—ç—à–∞: {len(results['cached'])}\n"
                    f"‚Ä¢ –ù–µ—É–¥–∞—á: {len(results['failed'])}\n"
                )
                
                if results['errors']:
                    summary += f"\n‚ùå <b>–û—à–∏–±–∫–∏:</b>\n" + "\n".join(f"‚Ä¢ {error}" for error in results['errors'][:3])
                    if len(results['errors']) > 3:
                        summary += f"\n... –∏ –µ—â–µ {len(results['errors']) - 3} –æ—à–∏–±–æ–∫"
                
                await send_topic_aware_message(message, summary)
                return
                
            except Exception as e:
                logging.error(f"Batch processing failed: {e}, falling back to individual processing")
        
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–º–µ–Ω–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É)
        for domain in valid_domains:
            start_time = time()
            cached = await r.get(f"result:{domain}")
            is_full_report = cached and all(k in cached for k in ["üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "üìÑ WHOIS", "‚è±Ô∏è TTFB"])
            
            # –í –≥—Ä—É–ø–ø–∞—Ö - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤ –õ–°
            if is_group_chat(message):
                if cached and (short_mode or is_full_report):
                    # –ï—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤ –õ–°
                    bot_info = await bot.get_me()
                    bot_username = bot_info.username
                    deep_link = f"https://t.me/{bot_username}?start={quote(domain)}"
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f"üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –õ–°", url=deep_link)]
                    ])
                    
                    await send_topic_aware_message(message,
                        f"‚úÖ <b>{domain}</b> - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:",
                        reply_markup=keyboard
                    )
                    await log_analytics("domain_check", user_id,
                                      domain=domain, check_type="short" if short_mode else "full",
                                      result_status="cached", execution_time=time() - start_time)
                    logging.info(f"Group: offered cached result for {domain} to user {user_id}")
                else:
                    # –ù–µ—Ç –∫—ç—à–∞ - —Å—Ç–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
                    chat_id = message.chat.id
                    message_id = message.message_id
                    thread_id = get_topic_thread_id(message)
                    
                    enqueued = await enqueue(domain, user_id, short_mode=short_mode,
                                           chat_id=chat_id, message_id=message_id, thread_id=thread_id)
                    
                    bot_info = await bot.get_me()
                    bot_username = bot_info.username
                    deep_link = f"https://t.me/{bot_username}?start={quote(domain)}"
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f"üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –õ–°", url=deep_link)]
                    ])
                    
                    if enqueued:
                        await send_topic_aware_message(message, 
                            f"‚úÖ <b>{domain}</b> –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.\n–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
                            reply_markup=keyboard
                        )
                        await log_analytics("domain_check", user_id,
                                          domain=domain, check_type="short" if short_mode else "full",
                                          result_status="queued", execution_time=time() - start_time)
                    else:
                        await send_topic_aware_message(message, 
                            f"‚ö†Ô∏è <b>{domain}</b> —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏.\n–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
                            reply_markup=keyboard
                        )
                    logging.info(f"Group: enqueued {domain} for user {user_id} (short_mode={short_mode})")
                
                await r.lpush(f"history:{user_id}", f"{datetime.now().strftime('%Y-%m-%d %H:%M')} - {domain}")
                await r.ltrim(f"history:{user_id}", 0, 9)
            else:
                # –í –õ–° - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ –æ–±—ã—á–Ω–æ
                if cached and (short_mode or is_full_report):
                    if short_mode:
                        lines = cached.split("\n")
                        filtered_lines = []
                        include_next = False
                        for line in lines:
                            if any(k in line for k in ["üü¢ Ping", "üîí TLS", "üåê HTTP", "üõ°", "üü¢ CDN", "üõ∞ –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏"]):
                                filtered_lines.append(line)
                                include_next = True  # –í–∫–ª—é—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ "üîí TLS")
                            elif include_next and line.strip().startswith(("‚úÖ", "‚ùå", "‚è≥")):
                                filtered_lines.append(line)
                                include_next = False
                            else:
                                include_next = False
                        filtered = "\n".join(filtered_lines)
                        
                        keyboard = get_full_report_button(domain)
                        
                        await send_topic_aware_message(message,
                            f"‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞ –¥–ª—è {domain}:\n\n{filtered}",
                            reply_markup=keyboard
                        )
                        await log_analytics("domain_check", user_id,
                                          domain=domain, check_type="short" if short_mode else "full",
                                          result_status="cached", execution_time=time() - start_time)
                        logging.info(f"Returned cached short report for {domain} to user {user_id}")
                    else:
                        await send_topic_aware_message(message, f"‚ö° –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞ –¥–ª—è {domain}:\n\n{cached}")
                        await log_analytics("domain_check", user_id,
                                          domain=domain, check_type="full",
                                          result_status="cached", execution_time=time() - start_time)
                        logging.info(f"Returned cached full report for {domain} to user {user_id}")
                    await r.lpush(f"history:{user_id}", f"{datetime.now().strftime('%Y-%m-%d %H:%M')} - {domain}")
                    await r.ltrim(f"history:{user_id}", 0, 9)
                else:
                    # –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ –æ—á–µ—Ä–µ–¥—å
                    chat_id = message.chat.id
                    message_id = message.message_id
                    thread_id = get_topic_thread_id(message)
                    
                    enqueued = await enqueue(domain, user_id, short_mode=short_mode,
                                           chat_id=chat_id, message_id=message_id, thread_id=thread_id)
                    if enqueued:
                        await send_topic_aware_message(message, f"‚úÖ <b>{domain}</b> –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ {'–∫—Ä–∞—Ç–∫–∏–π' if short_mode else '–ø–æ–ª–Ω—ã–π'} –æ—Ç—á—ë—Ç.")
                        await log_analytics("domain_check", user_id,
                                          domain=domain, check_type="short" if short_mode else "full",
                                          result_status="queued", execution_time=time() - start_time)
                    else:
                        await send_topic_aware_message(message, f"‚ö†Ô∏è <b>{domain}</b> —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
                    logging.info(f"Enqueued {domain} for user {user_id} (short_mode={short_mode})")
    except Exception as e:
        logging.error(f"Failed to process domains for user {user_id}: {str(e)}")
        await send_topic_aware_message(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await r.aclose()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    from aiogram import Dispatcher
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    await init_analytics()
    
    dp = Dispatcher()
    dp.include_router(router)
    
    try:
        logging.warning("üöÄ Starting Domain Reality Bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Error starting bot: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    logging.info("Starting bot script")
    asyncio.run(main())
