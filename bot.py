import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import os
from redis_queue import enqueue
from collections import defaultdict
from time import time
import redis.asyncio as redis
import re
from urllib.parse import urlparse
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, filename="bot.log", format="%(asctime)s - %(levelname)s - %(message)s")

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard.add(KeyboardButton("/check"))
    keyboard.add(KeyboardButton("/ping"))
    keyboard.add(KeyboardButton("/stats"))
    return keyboard

async def get_redis():
    try:
        return redis.Redis(
            host=os.getenv("REDIS_HOST", "localhost"),
            port=int(os.getenv("REDIS_PORT", "6379")),
            decode_responses=True,
            retry_on_timeout=True
        )
    except Exception as ‚ñ†‚ñ†‚ñ†:
        logging.error(f"Failed to connect to Redis: {str(‚ñ†‚ñ†‚ñ†)}")
        raise

user_requests = defaultdict(list)
user_violations = {}

def extract_domain(text: str):
    if text.startswith("http://") or text.startswith("https://"):
        try:
            parsed = urlparse(text)
            if parsed.hostname:
                return parsed.hostname
        except:
            return None
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–æ–º–µ–Ω–æ–≤ –∏ –¥–æ–º–µ–Ω–æ–≤ —Å –ø–æ—Ä—Ç–æ–º
    if re.match(r"^[a-zA-Z0-9][a-zA-Z0-9.-]{0,253}[a-zA-Z0-9](:[0-9]{1,5})?$", text):
        return text
    return None

def rate_limited(user_id):
    now = time()
    user_requests[user_id] = [ts for ts in user_requests[user_id] if now - ts < 30]
    if len(user_requests[user_id]) >= 10:
        return True
    user_requests[user_id].append(now)
    return False

def get_penalty(user_id):
    record = user_violations.get(user_id, {"count": 0, "until": 0})
    now = time()
    if record["count"] < 5:
        return 0, False
    if now < record["until"]:
        return int(record["until"] - now), True
    return 0, False

def register_violation(user_id):
    record = user_violations.get(user_id, {"count": 0, "until": 0})
    record["count"] += 1
    duration = [60, 300, 900, 3600]  # 1m, 5m, 15m, 1h
    if record["count"] >= 5:
        stage = record["count"] - 5
        timeout = duration[min(stage, len(duration) - 1)]
        record["until"] = time() + timeout
    user_violations[user_id] = record
    return int(record["until"] - time()) if record["count"] >= 5 else 0

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    welcome_message = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–æ–≤ –Ω–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–∫—Å–∏ –∏ Reality.\n\n"
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/check <–¥–æ–º–µ–Ω> ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>/check example.com</code>)\n"
        "/ping ‚Äî –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        "/stats ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ –∏ –∫—ç—à–∞\n\n"
        "üì© –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –¥–æ–º–µ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>example.com</code>\n"
        "üöÄ –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞!"
    )
    await message.answer(welcome_message, parse_mode="HTML", reply_markup=get_main_keyboard())

@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await message.answer(
        """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–æ–≤ –Ω–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–∫—Å–∏ –∏ Reality.

–û—Ç–ø—Ä–∞–≤—å –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, `example.com`) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:
/check <–¥–æ–º–µ–Ω>

/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∏ –∫—ç—à–∞""",
        parse_mode="Markdown"
    )

@dp.message_handler(commands=["ping"])
async def cmd_ping(message: types.Message):
    await message.reply("üèì –Ø –∂–∏–≤!")

@dp.message_handler(commands=["stats"])
async def cmd_stats(message: types.Message):
    r = await get_redis()
    try:
        qlen = await r.llen("domain_check_queue")
        keys = await r.keys("result:*")
        await message.reply(
            f"üìä –í –æ—á–µ—Ä–µ–¥–∏: {qlen} –¥–æ–º–µ–Ω–æ–≤\nüß† –í –∫—ç—à–µ: {len(keys)} –¥–æ–º–µ–Ω–æ–≤"
        )
    except Exception as e:
        logging.error(f"Stats command failed: {str(e)}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        await r.aclose()

@dp.message_handler(commands=["check"])
async def cmd_check(message: types.Message):
    args = message.get_args().strip()
    if not args:
        await message.reply("‚õî –£–∫–∞–∂–∏ –¥–æ–º–µ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä: /check example.com")
        return
    await handle_domain_logic(message, args)

@dp.message_handler()
async def handle_domain(message: types.Message):
    await handle_domain_logic(message, message.text.strip())

async def handle_domain_logic(message: types.Message, input_text: str):
    user_id = message.from_user.id
    penalty, active = get_penalty(user_id)
    if active:
        await message.reply(f"üö´ –í—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –Ω–∞ {penalty//60} –º–∏–Ω—É—Ç.")
        return

    if rate_limited(user_id):
        await message.reply("üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ù–µ –±–æ–ª–µ–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ 30 —Å–µ–∫—É–Ω–¥.")
        return

    if len(input_text) > 100 or input_text.count(".") > 5:
        timeout = register_violation(user_id)
        await message.reply(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–æ–º–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ {timeout//60} –º–∏–Ω—É—Ç.")
        return

    domain = extract_domain(input_text)
    if not domain:
        timeout = register_violation(user_id)
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–æ–º–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ {timeout//60} –º–∏–Ω—É—Ç.")
        return

    r = await get_redis()
    try:
        cached = await r.get(f"result:{domain}")
        if cached:
            await message.answer(f"‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞:\n\n{cached}")
            return

        await enqueue(domain, user_id)
        await message.answer(f"‚úÖ <b>{domain}</b> –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    except Exception as e:
        logging.error(f"Failed to process domain {domain}: {str(e)}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {domain}")
    finally:
        await r.aclose()

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp)
