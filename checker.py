import socket
import ssl
import time
import httpx
import requests
import ping3
import whois
from datetime import datetime
import logging
import dns.resolver
import re
from logging.handlers import RotatingFileHandler
import os
import geoip2.database
import geoip2.errors
import json
import ipaddress

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
log_dir = os.getenv("LOG_DIR", "/app")
log_file = os.path.join(log_dir, "checker.log")
os.makedirs(log_dir, exist_ok=True)

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è checker
checker_logger = logging.getLogger("checker")
checker_logger.setLevel(logging.WARNING)  # –¢–æ–ª—å–∫–æ WARNING –∏ ERROR

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
if not checker_logger.handlers:
    handler = RotatingFileHandler(log_file, maxBytes=5*1024*1024, backupCount=2)
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    handler.setFormatter(formatter)
    checker_logger.addHandler(handler)

CDN_PATTERNS = [
    "cloudflare", "akamai", "fastly", "incapsula", "imperva", "sucuri", "stackpath",
    "cdn77", "edgecast", "keycdn", "azure", "tencent", "alibaba", "aliyun", "bunnycdn",
    "arvan", "g-core", "mail.ru", "mailru", "vk.com", "vk", "limelight", "lumen",
    "level3", "centurylink", "cloudfront", "verizon", "google", "gws", "googlecloud",
    "x-google", "via: 1.1 google"
]

WAF_FINGERPRINTS = [
    "cloudflare", "imperva", "sucuri", "incapsula", "akamai", "barracuda"
]

FINGERPRINTS = {
    "nginx": "NGINX",
    "apache": "Apache",
    "caddy": "Caddy",
    "iis": "Microsoft IIS",
    "litespeed": "LiteSpeed",
    "openresty": "OpenResty",
    "tengine": "Tengine",
    "cloudflare": "Cloudflare"
}

def resolve_dns(domain):
    """–†–∞–∑—Ä–µ—à–∞–µ—Ç DNS –¥–ª—è –¥–æ–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç IP."""
    try:
        resolver = dns.resolver.Resolver()
        resolver.timeout = 5
        resolver.lifetime = 5
        answers = resolver.resolve(domain, 'A')
        return str(answers[0])
    except Exception as e:
        checker_logger.error(f"DNS resolution failed for {domain}: {str(e)}")
        return None

def get_ping(ip):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç ping –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö."""
    try:
        result = ping3.ping(ip, timeout=3)
        return result * 1000 if result else None
    except Exception as e:
        checker_logger.error(f"Ping failed for {ip}: {str(e)}")
        return None

def get_tls_info(domain, port=443):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ TLS."""
    info = {"tls": None, "cipher": None, "expires_days": None, "error": None}
    try:
        context = ssl.create_default_context()
        with socket.create_connection((domain, port), timeout=10) as sock:
            with context.wrap_socket(sock, server_hostname=domain) as s:
                cert = s.getpeercert()
                info["tls"] = s.version()
                info["cipher"] = s.cipher()[0] if s.cipher() else None
                if cert and "notAfter" in cert:
                    expire = datetime.strptime(cert["notAfter"], "%b %d %H:%M:%S %Y %Z")
                    info["expires_days"] = (expire - datetime.utcnow()).days
    except Exception as e:
        info["error"] = str(e)
    return info

def get_http_info(domain, timeout=20.0):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ HTTP."""
    info = {"http2": False, "http3": False, "ttfb": None, "server": None, "redirect": None, "error": None}
    
    try:
        start = time.time()
        # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTTP/2 –≤ httpx
        with httpx.Client(timeout=timeout, verify=False, follow_redirects=False, http2=True) as client:
            response = client.get(f"https://{domain}")
            info["ttfb"] = time.time() - start
            info["http2"] = response.http_version == "HTTP/2"
            info["server"] = response.headers.get("Server", "").lower()
            
            if 300 <= response.status_code < 400:
                info["redirect"] = response.headers.get("Location")
                
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP/3
        try:
            alt_svc = response.headers.get("alt-svc", "").lower()
            info["http3"] = "h3" in alt_svc or "h3-" in alt_svc
        except:
            info["http3"] = False
            
    except Exception as e:
        info["error"] = str(e)
    
    return info

def scan_ports(ip, ports=[80, 443, 8080, 8443], timeout=2):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å."""
    results = []
    for port in ports:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(timeout)
            result = sock.connect_ex((ip, port))
            sock.close()
            status = "üü¢ –æ—Ç–∫—Ä—ã—Ç" if result == 0 else "üî¥ –∑–∞–∫—Ä—ã—Ç"
            results.append(f"TCP {port} {status}")
        except Exception:
            results.append(f"TCP {port} üî¥ –∑–∞–∫—Ä—ã—Ç")
    return results

def get_geoip2_info(ip):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ GeoIP2 –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        db_path = os.getenv("GEOIP2_DB_PATH", "/app/data/GeoLite2-City.mmdb")
        
        if not os.path.exists(db_path):
            return "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö GeoIP2 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        with geoip2.database.Reader(db_path) as reader:
            try:
                response = reader.city(ip)
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                result = {
                    'country': response.country.name,
                    'country_code': response.country.iso_code,
                    'region': response.subdivisions.most_specific.name if response.subdivisions else 'N/A',
                    'city': response.city.name if response.city.name else 'N/A',
                    'coordinates': f"{response.location.latitude}, {response.location.longitude}" if response.location.latitude else 'N/A',
                    'accuracy_radius': response.location.accuracy_radius if response.location.accuracy_radius else None
                }
                
                return result
                
            except geoip2.errors.AddressNotFoundError:
                return "‚ùå IP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ GeoIP2 –±–∞–∑–µ"
    except Exception as e:
        checker_logger.error(f"GeoIP2 lookup failed for {ip}: {str(e)}")
        return f"‚ùå GeoIP2 –æ—à–∏–±–∫–∞: {str(e)}"

def get_rir_info(ip, timeout=10):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ RIR (Regional Internet Registry)."""
    try:
        ip_obj = ipaddress.IPv4Address(ip)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º RIR –ø–æ IP –¥–∏–∞–ø–∞–∑–æ–Ω—É
        rir_sources = {
            'ripe': {
                'name': 'RIPE NCC',
                'url': 'https://rest.db.ripe.net/search.json',
                'source': 'ripe',
                'emoji': 'üá™üá∫',
                'regions': ['Europe', 'Middle East', 'Central Asia']
            },
            'arin': {
                'name': 'ARIN',
                'url': 'https://whois.arin.net/rest/ip/{ip}.json',
                'source': 'arin', 
                'emoji': 'üá∫üá∏',
                'regions': ['North America']
            },
            'apnic': {
                'name': 'APNIC',
                'url': 'https://wq.apnic.net/apnic-bin/whois.pl',
                'source': 'apnic',
                'emoji': 'üåè',
                'regions': ['Asia Pacific']
            },
            'lacnic': {
                'name': 'LACNIC', 
                'url': 'https://rdap.lacnic.net/rdap/ip/{ip}',
                'source': 'lacnic',
                'emoji': 'üåé',
                'regions': ['Latin America', 'Caribbean']
            },
            'afrinic': {
                'name': 'AFRINIC',
                'url': 'https://rdap.afrinic.net/rdap/ip/{ip}',
                'source': 'afrinic',
                'emoji': 'üåç',
                'regions': ['Africa']
            }
        }
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º RIPE (—Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ)
        for rir_key in ['ripe', 'arin', 'apnic', 'lacnic', 'afrinic']:
            rir = rir_sources[rir_key]
            try:
                if rir_key == 'ripe':
                    # RIPE NCC REST API
                    url = rir['url']
                    params = {
                        'query-string': ip,
                        'source': rir['source'],
                        'type-filter': 'inetnum,inet6num,route,route6,aut-num'
                    }
                    
                    response = requests.get(url, params=params, timeout=timeout)
                    data = response.json()
                    
                    if 'objects' not in data or not data['objects']['object']:
                        continue
                    
                    info = {
                        'rir': f"{rir['emoji']} {rir['name']}",
                        'regions': rir['regions']
                    }
                    
                    for obj in data['objects']['object']:
                        obj_type = obj.get('type', '')
                        attributes = obj.get('attributes', {}).get('attribute', [])
                        
                        if obj_type in ['inetnum', 'inet6num']:
                            for attr in attributes:
                                attr_name = attr.get('name', '')
                                attr_value = attr.get('value', '')
                                
                                if attr_name == 'netname':
                                    info['network_name'] = attr_value
                                elif attr_name == 'country':
                                    info['country'] = attr_value
                                elif attr_name == 'org':
                                    info['organization_ref'] = attr_value
                                elif attr_name == 'status':
                                    info['status'] = attr_value
                                elif attr_name == 'descr':
                                    if 'description' not in info:
                                        info['description'] = []
                                    info['description'].append(attr_value)
                    
                    if len(info) > 2:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—Ä–æ–º–µ rir –∏ regions
                        return info
                    else:
                        continue
                
                elif rir_key == 'arin':
                    # ARIN WHOIS REST API (–±–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞)
                    url = rir['url'].format(ip=ip)
                    response = requests.get(url, timeout=timeout)
                    if response.status_code == 200:
                        return {
                            'rir': f"{rir['emoji']} {rir['name']}",
                            'regions': rir['regions'],
                            'network_name': 'ARIN Network',
                            'status': 'ARIN Registry'
                        }
                
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö RIR - –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                else:
                    return {
                        'rir': f"{rir['emoji']} {rir['name']}",
                        'regions': rir['regions'],
                        'network_name': f'{rir["name"]} Network',
                        'status': f'{rir["name"]} Registry'
                    }
                        
            except Exception as rir_error:
                checker_logger.debug(f"{rir['name']} lookup failed for {ip}: {str(rir_error)}")
                continue
        
        return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–æ –≤—Å–µ—Ö RIR"
        
    except requests.exceptions.RequestException as e:
        checker_logger.error(f"RIR request failed for {ip}: {str(e)}")
        return f"‚ùå RIR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}"
    except Exception as e:
        checker_logger.error(f"RIR lookup failed for {ip}: {str(e)}")
        return f"‚ùå RIR –æ—à–∏–±–∫–∞: {str(e)}"

def get_enhanced_ip_info(ip, timeout=10):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è."""
    results = {}
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ ip-api.com (–±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ)
    try:
        response = requests.get(f"http://ip-api.com/json/{ip}?lang=ru", timeout=timeout)
        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "success":
                location_parts = []
                if data.get("country", "Unknown") != "Unknown":
                    location_parts.append(data["country"])
                if data.get("regionName", "Unknown") != "Unknown":
                    location_parts.append(data["regionName"])  
                if data.get("city", "Unknown") != "Unknown":
                    location_parts.append(data["city"])
                
                results['basic'] = {
                    'location': " / ".join(location_parts) if location_parts else "N/A",
                    'asn': data.get("as", "N/A"),
                    'country_code': data.get("countryCode", "N/A"),
                    'isp': data.get("isp", "N/A")
                }
            else:
                results['basic'] = {'location': 'N/A', 'asn': 'N/A', 'country_code': 'N/A', 'isp': 'N/A'}
        else:
            results['basic'] = {'location': 'N/A', 'asn': 'N/A', 'country_code': 'N/A', 'isp': 'N/A'}
    except Exception as e:
        checker_logger.warning(f"Failed to fetch ip-api.com for {ip}: {str(e)}")
        results['basic'] = {'location': 'N/A', 'asn': 'N/A', 'country_code': 'N/A', 'isp': 'N/A'}
    
    # GeoIP2 –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ç–æ—á–Ω–æ—Å—Ç—å)
    geoip2_info = get_geoip2_info(ip)
    results['geoip2'] = geoip2_info
    
    # RIR –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    rir_enabled = os.getenv("RIR_ENABLED", "true").lower() == "true"
    if rir_enabled:
        rir_info = get_rir_info(ip, timeout)
        results['rir'] = rir_info
    else:
        results['rir'] = "üîï RIR –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
    
    # ipinfo.io –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    try:
        response = requests.get(f"https://ipinfo.io/{ip}/json", timeout=timeout)
        if response.status_code == 200:
            data = response.json()
            results['ipinfo'] = {
                'timezone': data.get('timezone', 'N/A'),
                'org': data.get('org', 'N/A'),
                'hostname': data.get('hostname', 'N/A')
            }
        else:
            results['ipinfo'] = {'timezone': 'N/A', 'org': 'N/A', 'hostname': 'N/A'}
    except Exception as e:
        checker_logger.warning(f"Failed to fetch ipinfo.org for {ip}: {str(e)}")
        results['ipinfo'] = {'timezone': 'N/A', 'org': 'N/A', 'hostname': 'N/A'}
    
    return results

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
def fingerprint_server(server_header):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É Server."""
    if not server_header:
        return "üßæ –°–µ—Ä–≤–µ—Ä: —Å–∫—Ä—ã—Ç"
    
    server_lower = server_header.lower()
    for pattern, name in FINGERPRINTS.items():
        if pattern in server_lower:
            return f"üßæ –°–µ—Ä–≤–µ—Ä: {name}"
    return f"üßæ –°–µ—Ä–≤–µ—Ä: {server_header.title()}"

def detect_waf(headers):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç WAF –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º."""
    if not headers:
        return "üõ° WAF –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
    
    headers_lower = headers.lower()
    for waf in WAF_FINGERPRINTS:
        if waf in headers_lower:
            return f"üõ° WAF –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {waf.capitalize()}"
    return "üõ° WAF –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"

def detect_cdn(http_info, asn):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç CDN."""
    if not http_info:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers_to_check = [
        http_info.get("server", ""),
        str(http_info.get("headers", {})).lower()
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ASN
    asn_lower = asn.lower() if asn and asn != "N/A" else ""
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ CDN (–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–º–∏)
    priority_cdns = [
        ("cloudflare", ["cloudflare", "cf-ray"]),
        ("akamai", ["akamai", "edgekey"]),
        ("fastly", ["fastly"]),
        ("aws", ["amazon", "aws", "cloudfront"]),
        ("google", ["google", "gws", "googleusercontent"]),
        ("azure", ["azure", "microsoft"]),
        ("incapsula", ["incapsula", "imperva"]),
        ("sucuri", ["sucuri"]),
        ("stackpath", ["stackpath", "netdna"]),
        ("mailru", ["mail.ru", "mailru"]),
        ("yandex", ["yandex"])
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    for header in headers_to_check:
        if header:
            header_lower = header.lower()
            for cdn_name, patterns in priority_cdns:
                for pat in patterns:
                    if pat in header_lower:
                        return cdn_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ASN
    if asn_lower:
        for cdn_name, patterns in priority_cdns:
            for pat in patterns:
                if pat in asn_lower:
                    return cdn_name
    
    return None

def check_spamhaus(ip):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç IP –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Spamhaus."""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ DNS
        octets = ip.split('.')
        reversed_ip = '.'.join(reversed(octets))
        query = f"{reversed_ip}.zen.spamhaus.org"
        
        try:
            dns.resolver.resolve(query, 'A')
            return "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –≤ Spamhaus"
        except dns.resolver.NXDOMAIN:
            return "‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω –≤ Spamhaus"
        except:
            return "‚ùì Spamhaus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    except Exception:
        return "‚ùì Spamhaus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

def get_domain_whois(domain):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é WHOIS –¥–ª—è –¥–æ–º–µ–Ω–∞."""
    try:
        w = whois.whois(domain)
        if w.expiration_date:
            exp_date = w.expiration_date
            if isinstance(exp_date, list):
                exp_date = exp_date[0]
            return exp_date.strftime("%Y-%m-%d")
        return None
    except Exception as e:
        checker_logger.error(f"WHOIS lookup failed for {domain}: {str(e)}")
        return None

def run_check(domain_port: str, ping_threshold=50, http_timeout=20.0, port_timeout=2, full_report=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–º–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if ":" in domain_port:
        domain, port = domain_port.split(":")
        port = int(port)
    else:
        domain = domain_port
        port = 443

    report = [f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {domain}:"]

    # DNS
    ip = resolve_dns(domain)
    report.append(f"‚úÖ A: {ip}" if ip else "‚ùå DNS: –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è")
    if not ip:
        return "\n".join(report)

    # –ü–∏–Ω–≥
    ping_ms = get_ping(ip)
    ping_result = f"üü¢ Ping: ~{ping_ms:.1f} ms" if ping_ms else "‚ùå Ping: –æ—à–∏–±–∫–∞"

    # TLS
    tls = get_tls_info(domain, port)
    tls_results = []
    if tls["tls"]:
        tls_results.append(f"‚úÖ {tls['tls']} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        if tls["cipher"]:
            tls_results.append(f"‚úÖ {tls['cipher']} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        if tls["expires_days"] is not None:
            tls_results.append(f"‚è≥ TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {tls['expires_days']} –¥–Ω.")
    else:
        tls_results.append(f"‚ùå TLS: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ({tls['error'] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})")

    # HTTP
    http = get_http_info(domain, timeout=http_timeout)
    http["domain"] = domain
    http_results = [
        "‚úÖ HTTP/2 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" if http["http2"] else "‚ùå HTTP/2 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
        "‚úÖ HTTP/3 (h3) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" if http["http3"] else "‚ùå HTTP/3 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    ]
    http_additional = []
    if http["ttfb"]:
        http_additional.append(f"‚è±Ô∏è TTFB: {http['ttfb']:.2f} —Å–µ–∫")
    else:
        http_additional.append(f"‚è±Ô∏è TTFB: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({http['error'] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})")
    if http["redirect"]:
        http_additional.append(f"üîÅ Redirect: {http['redirect']}")
    else:
        http_additional.append("üîÅ –ë–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞")
    http_additional.append(fingerprint_server(http.get("server")))

    # ‚Üì‚Üì‚Üì –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± IP –æ–¥–∏–Ω —Ä–∞–∑ ‚Üì‚Üì‚Üì
    loc, asn = "N/A", "N/A"
    enhanced_ip_info = None
    cdn = None
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        enhanced_ip_info = get_enhanced_ip_info(ip)
        # –ë–µ—Ä–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        loc = enhanced_ip_info['basic']['location']
        asn = enhanced_ip_info['basic']['asn']
        cdn = detect_cdn(http, asn)
    except Exception as e:
        checker_logger.warning(f"Enhanced IP info failed for {domain}: {str(e)}")

    waf_result = detect_waf(http.get("server"))
    cdn_result = f"{'üü¢ CDN –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω' if not cdn else f'‚ö†Ô∏è CDN –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {cdn.capitalize()}'}"

    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏
    suitability_results = []
    reasons = []

    if not http["http2"]:
        reasons.append("HTTP/2 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    if tls["tls"] not in ["TLSv1.3", "TLS 1.3"]:
        reasons.append("TLS 1.3 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    if ping_ms and ping_ms >= ping_threshold:
        reasons.append(f"–≤—ã—Å–æ–∫–∏–π –ø–∏–Ω–≥ ({ping_ms:.1f} ms)")
    if cdn:
        reasons.append(f"CDN –æ–±–Ω–∞—Ä—É–∂–µ–Ω ({cdn.capitalize()})")

    if not reasons:
        suitability_results.append("‚úÖ –ü—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è Reality")
    elif cdn and reasons == [f"CDN –æ–±–Ω–∞—Ä—É–∂–µ–Ω ({cdn.capitalize()})"]:
        suitability_results.append(f"‚ö†Ô∏è –£—Å–ª–æ–≤–Ω–æ –ø—Ä–∏–≥–æ–¥–µ–Ω: CDN –æ–±–Ω–∞—Ä—É–∂–µ–Ω ({cdn.capitalize()})")
    else:
        suitability_results.append(f"‚ùå –ù–µ –ø—Ä–∏–≥–æ–¥–µ–Ω: {', '.join(reasons)}")

    if not full_report:
        # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç
        report.append(ping_result)
        report.append("üîí TLS: " + (tls_results[0] if tls_results else "‚ùå TLS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))
        report.append("üåê HTTP: " + http_results[0])
        report.append(waf_result)
        report.append(cdn_result)
        report.append("üõ∞ " + suitability_results[0])
    else:
        # –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        report.append("\nüåê DNS")
        report.append(f"‚úÖ A: {ip}" if ip else "‚ùå DNS: –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è")

        report.append("\nüì° –°–∫–∞–Ω –ø–æ—Ä—Ç–æ–≤")
        report += scan_ports(ip, timeout=port_timeout)

        report.append("\nüåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ ASN")
        report.append(f"üìç IP: {loc}")
        report.append(f"üè¢ ASN: {asn}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        if enhanced_ip_info:
            # GeoIP2 –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ç–æ—á–Ω–æ—Å—Ç—å
            geoip2_data = enhanced_ip_info.get('geoip2')
            if isinstance(geoip2_data, dict):
                report.append("\nüìä GeoIP2 –¥–∞–Ω–Ω—ã–µ:")
                if geoip2_data.get('coordinates') != 'N/A':
                    report.append(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {geoip2_data.get('coordinates')}")
                if geoip2_data.get('accuracy_radius'):
                    report.append(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: ¬±{geoip2_data.get('accuracy_radius')} –∫–º")
            elif isinstance(geoip2_data, str):
                report.append(f"üìä GeoIP2: {geoip2_data}")
            
            # RIR –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –¥–ª—è –≤—Å–µ—Ö RIR)
            rir_data = enhanced_ip_info.get('rir')
            if isinstance(rir_data, dict):
                report.append(f"\nüìã {rir_data.get('rir', 'RIR')} –¥–∞–Ω–Ω—ã–µ:")
                if rir_data.get('network_name'):
                    report.append(f"üåê –°–µ—Ç—å: {rir_data['network_name']}")
                if rir_data.get('country'):
                    report.append(f"üè≥Ô∏è –°—Ç—Ä–∞–Ω–∞: {rir_data['country']}")
                if rir_data.get('organization_ref'):
                    report.append(f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {rir_data['organization_ref']}")
                if rir_data.get('status'):
                    report.append(f"üìä –°—Ç–∞—Ç—É—Å: {rir_data['status']}")
                if rir_data.get('description'):
                    descriptions = rir_data['description'][:2]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                    for desc in descriptions:
                        report.append(f"üìù {desc}")
                if rir_data.get('regions'):
                    report.append(f"üåç –†–µ–≥–∏–æ–Ω—ã: {', '.join(rir_data['regions'])}")
            elif isinstance(rir_data, str):
                report.append(f"üìã RIR: {rir_data}")
            
            # ipinfo.io –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            ipinfo_data = enhanced_ip_info.get('ipinfo')
            if isinstance(ipinfo_data, dict):
                report.append("\nüîç ipinfo.io (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ):")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ timezone, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —É–∂–µ –µ—Å—Ç—å –≤—ã—à–µ
                if ipinfo_data.get('timezone') != 'N/A':
                    report.append(f"üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {ipinfo_data['timezone']}")
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º—Ö–∞—É—Å–∞
                if ipinfo_data.get('hostname') and 'spamhaus' not in ipinfo_data.get('hostname', '').lower():
                    report.append("‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω –≤ Spamhaus")
                elif 'spamhaus' in ipinfo_data.get('hostname', '').lower():
                    report.append("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –≤ Spamhaus")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º—Ö–∞—É—Å–∞ –µ—Å–ª–∏ ipinfo –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        if not enhanced_ip_info or not enhanced_ip_info.get('ipinfo'):
            report.append(check_spamhaus(ip))
        report.append(ping_result)

        report.append("\nüîí TLS")
        report += tls_results

        report.append("\nüåê HTTP")
        report += http_results
        report += http_additional
        report.append(waf_result)
        report.append(cdn_result)

        report.append("\nüìÑ WHOIS")
        whois_exp = get_domain_whois(domain)
        report.append(f"üìÜ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {whois_exp}" if whois_exp else "‚ùå WHOIS: –æ—à–∏–±–∫–∞")

        report.append("\nüõ∞ –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏")
        report += suitability_results

    return "\n".join(report)
