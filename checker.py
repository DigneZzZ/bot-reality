import socket
import ssl
import time
import httpx
import requests
import ping3
import whois
from datetime import datetime
import logging
import dns.resolver
import re

logging.basicConfig(level=logging.INFO, filename="checker.log", format="%(asctime)s - %(levelname)s - %(message)s")

CDN_PATTERNS = [
    "cloudflare", "akamai", "fastly", "incapsula", "imperva", "sucuri", "stackpath",
    "cdn77", "edgecast", "keycdn", "azure", "tencent", "alibaba", "aliyun", "bunnycdn",
    "arvan", "g-core", "mail.ru", "mailru", "vk.com", "vk", "limelight", "lumen",
    "level3", "centurylink", "cloudfront", "verizon", "google", "gws", "googlecloud",
    "x-google", "via: 1.1 google"
]

WAF_FINGERPRINTS = [
    "cloudflare", "imperva", "sucuri", "incapsula", "akamai", "barracuda"
]

FINGERPRINTS = {
    "nginx": "NGINX",
    "apache": "Apache",
    "caddy": "Caddy",
    "iis": "Microsoft IIS",
    "gws": "Google Web Server",
}

def resolve_dns(domain):
    """–†–∞–∑—Ä–µ—à–∞–µ—Ç DNS –¥–ª—è –¥–æ–º–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç IPv4-–∞–¥—Ä–µ—Å."""
    try:
        return socket.gethostbyname(domain)
    except Exception as e:
        logging.error(f"DNS resolution failed for {domain}: {str(e)}")
        return None

def get_ping(ip, timeout=1):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∏–Ω–≥ –¥–æ IP-–∞–¥—Ä–µ—Å–∞."""
    try:
        result = ping3.ping(ip, timeout=timeout, unit="ms")
        if result is not None:
            return float(result)
        return None
    except Exception as e:
        logging.error(f"Ping failed for {ip}: {str(e)}")
        return None

def get_tls_info(domain, port, timeout=10):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç TLS: –≤–µ—Ä—Å–∏—é, —à–∏—Ñ—Ä, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞."""
    info = {"tls": None, "cipher": None, "expires_days": None, "error": None}
    try:
        # –†–∞–∑—Ä–µ—à–∞–µ–º IP –¥–æ–º–µ–Ω–∞
        ip = socket.gethostbyname(domain)
        logging.info(f"Resolved {domain} to IP: {ip}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç TLS —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π TLSv1.3
        ctx = ssl.create_default_context()
        ctx.minimum_version = ssl.TLSVersion.TLSv1_3  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ TLSv1.3
        ctx.set_ciphers("DEFAULT")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∏—Ñ—Ä—ã

        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as raw_socket:
            raw_socket.settimeout(timeout)
            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–æ–∫–µ—Ç –≤ TLS —Å —É–∫–∞–∑–∞–Ω–∏–µ–º SNI
            with ctx.wrap_socket(raw_socket, server_hostname=domain) as s:
                logging.info(f"Attempting TLS connection to {ip}:{port} with SNI={domain}")
                s.connect((ip, port))  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ IP
                info["tls"] = s.version()
                info["cipher"] = s.cipher()[0] if s.cipher() else None
                cert = s.getpeercert()
                expire = datetime.strptime(cert["notAfter"], "%b %d %H:%M:%S %Y %Z")
                info["expires_days"] = (expire - datetime.utcnow()).days
                logging.info(f"TLS connection successful: {info['tls']}, cipher: {info['cipher']}")
    except Exception as e:
        info["error"] = str(e)
        logging.error(f"TLS check failed for {domain}:{port}: {str(e)}")
    return info
    
def get_http_info(domain, timeout=20.0):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç HTTP: HTTP/2, HTTP/3, TTFB, —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã, —Å–µ—Ä–≤–µ—Ä."""
    info = {"http2": False, "http3": False, "server": "N/A", "ttfb": None, "redirect": None, "error": None, "headers": {}}
    try:
        url = f"https://{domain}"
        with httpx.Client(http2=True, timeout=timeout) as client:
            start = time.time()
            resp = client.get(url, follow_redirects=True)
            duration = time.time() - start
            info["http2"] = resp.http_version == "HTTP/2"
            alt_svc = resp.headers.get("alt-svc", "")
            info["http3"] = any("h3" in svc.lower() for svc in alt_svc.split(",") if svc.strip())
            info["server"] = resp.headers.get("server", "N/A")
            info["ttfb"] = duration
            if resp.history:
                info["redirect"] = str(resp.url)
            info["headers"] = dict(resp.headers)
            logging.info(f"HTTP headers for {domain}: {info['headers']}")
    except ImportError as e:
        info["error"] = "HTTP/2 support requires 'h2' package. Install httpx with `pip install httpx[http2]`."
        logging.error(f"HTTP check failed for {domain}: {str(e)}")
    except Exception as e:
        info["error"] = str(e)
        logging.error(f"HTTP check failed for {domain}: {str(e)}")
    return info

def get_domain_whois(domain):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç WHOIS: —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–º–µ–Ω–∞."""
    try:
        w = whois.whois(domain)
        exp = w.expiration_date
        if isinstance(exp, list):
            exp = exp[0]
        if isinstance(exp, datetime):
            return exp.isoformat()
        return None
    except Exception as e:
        logging.error(f"WHOIS check failed for {domain}: {str(e)}")
        return None

def get_ip_info(ip, timeout=5):
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ ASN –¥–ª—è IP."""
    try:
        r = requests.get(f"http://ip-api.com/json/{ip}", timeout=timeout).json()
        loc = f"{r.get('countryCode')} / {r.get('regionName')} / {r.get('city')}"
        asn = r.get("as", "N/A")
        return loc, asn
    except Exception as e:
        logging.error(f"IP info check failed for {ip}: {str(e)}")
        return "N/A", "N/A"

def scan_ports(ip, ports=[80, 443, 8080, 8443], timeout=1):
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã –Ω–∞ IP."""
    results = []
    for port in ports:
        try:
            with socket.create_connection((ip, port), timeout=timeout):
                results.append(f"TCP {port} üü¢ –æ—Ç–∫—Ä—ã—Ç")
        except Exception:
            results.append(f"TCP {port} üî¥ –∑–∞–∫—Ä—ã—Ç")
    return results

def check_spamhaus(ip):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ IP –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ Spamhaus."""
    try:
        rev = ".".join(reversed(ip.split("."))) + ".zen.spamhaus.org"
        resolver = dns.resolver.Resolver()
        answers = resolver.resolve(rev, "A")
        for rdata in answers:
            result = str(rdata)
            if result.startswith("127.0.0.") and 2 <= int(result.split(".")[-1]) <= 11:
                logging.info(f"Spamhaus check for {ip}: listed with code {result}")
                return f"‚ö†Ô∏è –í —Å–ø–∏—Å–∫–µ Spamhaus (–∫–æ–¥: {result})"
        logging.info(f"Spamhaus check for {ip}: not listed")
        return "‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω –≤ Spamhaus"
    except dns.resolver.NXDOMAIN:
        logging.info(f"Spamhaus check for {ip}: not listed")
        return "‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω –≤ Spamhaus"
    except Exception as e:
        logging.error(f"Spamhaus check failed for {ip}: {str(e)}")
        return f"‚ùå Spamhaus: –æ—à–∏–±–∫–∞ ({str(e)})"

def detect_cdn(http_info, asn):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ CDN –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, ASN –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    headers_str = " ".join(f"{k}:{v}" for k, v in http_info.get("headers", {}).items() if v).lower()
    server = http_info.get("server", "N/A") or "N/A"
    text = f"{server} {headers_str}".lower()

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ASN
    asn_text = (asn or "").lower()
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    combined_text = text + " " + asn_text

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ ipinfo.io –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–∫–∞–∫ –≤ bash-—Å–∫—Ä–∏–ø—Ç–µ)
    try:
        ip = socket.gethostbyname(http_info.get("domain", ""))  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ domain –¥–æ—Å—Ç—É–ø–µ–Ω –≤ http_info
        ipinfo_org = requests.get(f"https://ipinfo.io/{ip}/org", timeout=5).text.lower()
        combined_text += " " + ipinfo_org
    except Exception as e:
        logging.warning(f"Failed to fetch ipinfo.org for {ip}: {str(e)}")

    # –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    for pat in CDN_PATTERNS:
        if pat in combined_text:
            return pat

    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Google (ASN 15169)
    if asn and re.search(r"\b15169\b", asn):
        return "google"

    return None

def detect_waf(server):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ WAF –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Server."""
    server = (server or "N/A").lower()
    for pat in WAF_FINGERPRINTS:
        if pat in server:
            return f"üõ° –û–±–Ω–∞—Ä—É–∂–µ–Ω WAF: {pat.capitalize()}"
    return "üõ° WAF –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"

def fingerprint_server(server):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Server."""
    server = (server or "N/A").lower()
    for key, name in FINGERPRINTS.items():
        if key in server:
            return f"üßæ –°–µ—Ä–≤–µ—Ä: {name}"
    return "üßæ –°–µ—Ä–≤–µ—Ä: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

def run_check(domain_port: str, ping_threshold=50, http_timeout=20.0, port_timeout=2, full_report=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–º–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∏–ª–∏ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç."""
    if ":" in domain_port:
        domain, port = domain_port.split(":")
        port = int(port)
    else:
        domain = domain_port
        port = 443

    report = [f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {domain}:"]

    # DNS
    ip = resolve_dns(domain)
    report.append(f"‚úÖ A: {ip}" if ip else "‚ùå DNS: –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è")
    if not ip:
        return "\n".join(report)

    # –ü–∏–Ω–≥
    ping_ms = get_ping(ip)
    ping_result = f"üü¢ Ping: ~{ping_ms:.1f} ms" if ping_ms else "‚ùå Ping: –æ—à–∏–±–∫–∞"

    # TLS
    tls = get_tls_info(domain, port)
    tls_results = []
    if tls["tls"]:
        tls_results.append(f"‚úÖ {tls['tls']} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        if tls["cipher"]:
            tls_results.append(f"‚úÖ {tls['cipher']} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        if tls["expires_days"] is not None:
            tls_results.append(f"‚è≥ TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {tls['expires_days']} –¥–Ω.")
    else:
        tls_results.append(f"‚ùå TLS: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ({tls['error'] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})")

    # HTTP
    http = get_http_info(domain, timeout=http_timeout)
    http["domain"] = domain
    http_results = [
        "‚úÖ HTTP/2 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" if http["http2"] else "‚ùå HTTP/2 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
        "‚úÖ HTTP/3 (h3) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" if http["http3"] else "‚ùå HTTP/3 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    ]
    http_additional = []
    if http["ttfb"]:
        http_additional.append(f"‚è±Ô∏è TTFB: {http['ttfb']:.2f} —Å–µ–∫")
    else:
        http_additional.append(f"‚è±Ô∏è TTFB: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({http['error'] or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})")
    if http["redirect"]:
        http_additional.append(f"üîÅ Redirect: {http['redirect']}")
    else:
        http_additional.append("üîÅ –ë–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞")
    http_additional.append(fingerprint_server(http.get("server")))
    
    # WAF –∏ CDN
    waf_result = detect_waf(http.get("server"))
    cdn = detect_cdn(http, get_ip_info(ip)[1])
    cdn_result = f"üü¢ CDN {('–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω' if not cdn else f'–æ–±–Ω–∞—Ä—É–∂–µ–Ω: {cdn.capitalize()}')}"

    # –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏
    suitability_results = []
    if cdn:
        suitability_results.append(f"‚ùå –ù–µ –ø—Ä–∏–≥–æ–¥–µ–Ω: CDN –æ–±–Ω–∞—Ä—É–∂–µ–Ω ({cdn.capitalize()})")
    elif not http["http2"]:
        suitability_results.append("‚ùå –ù–µ –ø—Ä–∏–≥–æ–¥–µ–Ω: HTTP/2 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    elif tls["tls"] not in ["TLSv1.3", "TLS 1.3"]:
        suitability_results.append("‚ùå –ù–µ –ø—Ä–∏–≥–æ–¥–µ–Ω: TLS 1.3 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    elif ping_ms and ping_ms >= ping_threshold:
        suitability_results.append(f"‚ùå –ù–µ –ø—Ä–∏–≥–æ–¥–µ–Ω: –≤—ã—Å–æ–∫–∏–π –ø–∏–Ω–≥ ({ping_ms:.1f} ms)")
    else:
        suitability_results.append("‚úÖ –ü—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è Reality")

    if not full_report:
        # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç
        report.append(ping_result)
        report.append("    üîí TLS")
        report += tls_results[:1]
        report.append("    üåê HTTP")
        report += http_results
        report.append(waf_result)
        report.append(cdn_result)
        report.append("    üõ∞ –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏")
        report += suitability_results
    else:
        # –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç
        report.append("\nüåê DNS")
        report.append(f"‚úÖ A: {ip}" if ip else "‚ùå DNS: –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è")
        
        report.append("\nüì° –°–∫–∞–Ω –ø–æ—Ä—Ç–æ–≤")
        report += scan_ports(ip, timeout=port_timeout)
        
        report.append("\nüåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ ASN")
        loc, asn = get_ip_info(ip)
        report.append(f"üìç IP: {loc}")
        report.append(f"üè¢ ASN: {asn}")
        report.append(check_spamhaus(ip))
        report.append(ping_result)
        
        report.append("\nüîí TLS")
        report += tls_results
        
        report.append("\nüåê HTTP")
        report += http_results
        report += http_additional
        report.append(waf_result)
        report.append(cdn_result)
        
        report.append("\nüìÑ WHOIS")
        whois_exp = get_domain_whois(domain)
        report.append(f"üìÜ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {whois_exp}" if whois_exp else "‚ùå WHOIS: –æ—à–∏–±–∫–∞")
        
        report.append("\nüõ∞ –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏")
        report += suitability_results

    return "\n".join(report)
