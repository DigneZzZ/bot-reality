
import socket
import ssl
import time
import requests
import subprocess
import whois
from datetime import datetime
import idna

def resolve_dns(domain):
    try:
        ip = socket.gethostbyname(domain)
        return ip
    except Exception:
        return None

def get_ping(ip):
    ping_methods = [
        ["ping", "-c", "1", "-W", "1", ip],
        ["ping6", "-c", "1", "-W", "1", ip],
        ["ping", "-n", "-c", "1", ip],
    ]
    for cmd in ping_methods:
        try:
            output = subprocess.check_output(cmd, stderr=subprocess.DEVNULL, timeout=2).decode()
            if "time=" in output:
                time_part = output.split("time=")[-1].split(" ")[0]
                return f"üü¢ Ping: ~{time_part}"
        except Exception:
            continue
    return "‚ùå Ping: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"

def get_tls_info(domain, port):
    try:
        ctx = ssl.create_default_context()
        with ctx.wrap_socket(socket.socket(), server_hostname=domain) as s:
            s.settimeout(3)
            s.connect((domain, port))
            cert = s.getpeercert()
            tls_version = s.version()
            cipher = s.cipher()
            expire_str = cert["notAfter"]
            expire_date = datetime.strptime(expire_str, "%b %d %H:%M:%S %Y %Z")
            days_left = (expire_date - datetime.utcnow()).days
            return [
                f"‚úÖ {tls_version} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
                f"‚úÖ {cipher[0]} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è",
                f"‚è≥ TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω."
            ]
    except Exception:
        return ["‚ùå TLS: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"]

def get_http_info(domain):
    try:
        url = f"https://{domain}"
        start = time.time()
        resp = requests.get(url, timeout=5)
        duration = time.time() - start
        lines = []
        if resp.raw.version == 2:
            lines.append("‚úÖ HTTP/2 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        if "alt-svc" in resp.headers and "h3" in resp.headers["alt-svc"]:
            lines.append("‚úÖ HTTP/3 (h3) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        if "server" in resp.headers:
            lines.append(f"üîß Server: {resp.headers['server']}")
        lines.append(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (TTFB): {duration:.2f} —Å–µ–∫")
        if resp.is_redirect or resp.history:
            lines.append(f"üîÅ Redirect: {resp.url}")
        return lines
    except Exception:
        return ["‚ùå HTTP: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"]

def get_domain_whois(domain):
    try:
        w = whois.whois(domain)
        exp = w.expiration_date
        if isinstance(exp, list):
            exp = exp[0]
        return f"üìÜ WHOIS —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {exp.isoformat()}"
    except Exception:
        return "‚ùå WHOIS: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"

def get_ip_info(ip):
    try:
        r = requests.get(f"https://ipinfo.io/{ip}/json", timeout=5).json()
        loc = r.get("city", "") + ", " + r.get("region", "") + ", " + r.get("country", "")
        org = r.get("org", "N/A")
        asn = org.split()[0] if " " in org else org
        name = " ".join(org.split()[1:]) if " " in org else "N/A"
        return [f"üìç IPinfo: {loc}", f"üè¢ {org}", f"üõ∞Ô∏è WHOIS: {asn} / {name}"]
    except Exception:
        return ["‚ùå IPinfo: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"]

def run_check(domain_port: str):
    if ":" in domain_port:
        domain, port = domain_port.split(":")
        port = int(port)
    else:
        domain = domain_port
        port = 443

    domain = idna.encode(domain).decode("utf-8")
    result = []

    result.append(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {domain}:{port}\n")

    ip = resolve_dns(domain)
    result.append("üåê DNS")
    result.append(f"‚úÖ A: {ip}" if ip else "‚ùå DNS: –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è")

    result.append("\nüåé IP –∏ ASN")
    if ip:
        result += get_ip_info(ip)
        result.append(get_ping(ip))
    else:
        result.append("‚ùå IP: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    result.append("\nüîí TLS")
    result += get_tls_info(domain, port)

    result.append("\nüåê HTTP")
    result += get_http_info(domain)

    result.append("\nüìÑ WHOIS –¥–æ–º–µ–Ω–∞")
    result.append(get_domain_whois(domain))

    result.append("\nüõ∞ –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏")
    if ip and "cloudflare" in "".join(result).lower():
        result.append("‚ùå –ù–µ –ø—Ä–∏–≥–æ–¥–µ–Ω: –æ–±–Ω–∞—Ä—É–∂–µ–Ω CDN")
    else:
        result.append("‚úÖ –ü—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è Reality")

    return "\n".join(result)
