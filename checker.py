
import socket
import ssl
import time
import httpx
import requests
import subprocess
import whois
from datetime import datetime
import idna

CDN_PATTERNS = [
    "cloudflare", "akamai", "fastly", "incapsula", "imperva", "sucuri", "stackpath",
    "cdn77", "edgecast", "keycdn", "azure", "tencent", "alibaba", "aliyun", "bunnycdn",
    "arvan", "g-core", "mail.ru", "mailru", "vk.com", "vk", "limelight", "lumen",
    "level3", "centurylink", "cloudfront", "verizon"
]

def resolve_dns(domain):
    try:
        ip = socket.gethostbyname(domain)
        return ip
    except Exception:
        return None

def get_ping(ip):
    try:
        output = subprocess.check_output(["ping", "-c", "4", "-W", "1", ip], stderr=subprocess.DEVNULL).decode()
        for line in output.splitlines():
            if "rtt min/avg/max" in line or "round-trip min/avg/max" in line:
                avg = line.split("/")[4]
                return float(avg)
    except Exception:
        return None

def get_tls_info(domain, port):
    info = {"tls": None, "cipher": None, "expires_days": None}
    try:
        ctx = ssl.create_default_context()
        with ctx.wrap_socket(socket.socket(), server_hostname=domain) as s:
            s.settimeout(5)
            s.connect((domain, port))
            info["tls"] = s.version()
            info["cipher"] = s.cipher()[0]
            cert = s.getpeercert()
            expire = datetime.strptime(cert["notAfter"], "%b %d %H:%M:%S %Y %Z")
            info["expires_days"] = (expire - datetime.utcnow()).days
    except Exception:
        pass
    return info

def get_http_info(domain):
    info = {"http2": False, "http3": False, "server": None, "ttfb": None, "redirect": None}
    try:
        url = f"https://{domain}"
        with httpx.Client(http2=True, timeout=5.0) as client:
            start = time.time()
            resp = client.get(url, follow_redirects=True)
            duration = time.time() - start
            info["http2"] = resp.http_version == "HTTP/2"
            info["http3"] = "h3" in resp.headers.get("alt-svc", "")
            info["server"] = resp.headers.get("server", "N/A")
            info["ttfb"] = duration
            if resp.history:
                info["redirect"] = resp.url
    except Exception:
        pass
    return info

def get_domain_whois(domain):
    try:
        w = whois.whois(domain)
        exp = w.expiration_date
        if isinstance(exp, list):
            exp = exp[0]
        return exp.isoformat()
    except Exception:
        return None

def get_ip_info(ip):
    try:
        r = requests.get(f"https://ipinfo.io/{ip}/json", timeout=5).json()
        city = r.get("city", "")
        region = r.get("region", "")
        country = r.get("country", "")
        loc = f"{country} / {region} / {city}"
        org = r.get("org", "N/A")
        return loc, org
    except Exception:
        return "N/A", "N/A"

def detect_cdn(text):
    text = text.lower()
    for pat in CDN_PATTERNS:
        if pat in text:
            return pat
    return None

def run_check(domain_port: str):
    if ":" in domain_port:
        domain, port = domain_port.split(":")
        port = int(port)
    else:
        domain = domain_port
        port = 443

    domain = idna.encode(domain).decode("utf-8")
    report = []
    report.append(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: {domain}:{port}\n")

    ip = resolve_dns(domain)
    report.append("üåê DNS")
    if ip:
        report.append(f"‚úÖ A: {ip}")
    else:
        report.append("‚ùå DNS: –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è")
        return "\n".join(report)

    report.append("\nüåé IP –∏ ASN")
    ip_loc, ip_org = get_ip_info(ip)
    report.append(f"üìç IPinfo: {ip_loc}")
    report.append(f"üè¢ {ip_org}")

    ping_ms = get_ping(ip)
    if ping_ms is not None:
        report.append(f"üü¢ Ping: ~{ping_ms:.1f} ms")
    else:
        report.append("‚ùå Ping: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")

    report.append("\nüîí TLS")
    tls = get_tls_info(domain, port)
    if tls["tls"]:
        report.append(f"‚úÖ {tls['tls']} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        report.append(f"‚úÖ {tls['cipher']} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        if tls["expires_days"] is not None:
            report.append(f"‚è≥ TLS —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {tls['expires_days']} –¥–Ω.")
    else:
        report.append("‚ùå TLS: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")

    report.append("\nüåê HTTP")
    http = get_http_info(domain)
    report.append("‚úÖ HTTP/2 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" if http["http2"] else "‚ùå HTTP/2 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    report.append("‚úÖ HTTP/3 (h3) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" if http["http3"] else "‚ùå HTTP/3 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
    report.append(f"üîß Server: {http['server']}")
    if http["ttfb"]:
        report.append(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (TTFB): {http['ttfb']:.2f} —Å–µ–∫")
    if http["redirect"]:
        report.append(f"üîÅ Redirect: {http['redirect']}")

    report.append("\nüìÑ WHOIS –¥–æ–º–µ–Ω–∞")
    whois_exp = get_domain_whois(domain)
    if whois_exp:
        report.append(f"üìÜ WHOIS —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {whois_exp}")
    else:
        report.append("‚ùå WHOIS: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

    report.append("\nüõ∞ –û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç–∏")
    summary_text = " ".join(report).lower()
    verdict = []

    if detect_cdn(summary_text):
        verdict.append("‚ùå –ù–µ –ø—Ä–∏–≥–æ–¥–µ–Ω: –æ–±–Ω–∞—Ä—É–∂–µ–Ω CDN")
    elif not http["http2"]:
        verdict.append("‚ùå –ù–µ –ø—Ä–∏–≥–æ–¥–µ–Ω: HTTP/2 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    elif tls["tls"] not in ["TLSv1.3", "TLS 1.3"]:
        verdict.append("‚ùå –ù–µ –ø—Ä–∏–≥–æ–¥–µ–Ω: TLS 1.3 –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    elif ping_ms and ping_ms >= 8:
        verdict.append("‚ùå –ù–µ –ø—Ä–∏–≥–æ–¥–µ–Ω: —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –ø–∏–Ω–≥")
    else:
        verdict.append("‚úÖ –ü—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è Reality")

    report.append("\n".join(verdict))
    return "\n".join(report)
