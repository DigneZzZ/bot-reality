import asyncio
import redis.asyncio as redis
import logging
import os
import json
from logging.handlers import RotatingFileHandler
from redis_queue import get_redis
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import get_full_report_button
from checker import run_check  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ checker.py
from datetime import datetime
from typing import Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
try:
    from retry_logic import retry_with_backoff, DOMAIN_CHECK_RETRY, REDIS_RETRY
    RETRY_AVAILABLE = True
except ImportError:
    RETRY_AVAILABLE = False
    
try:
    from analytics import AnalyticsCollector
    ANALYTICS_AVAILABLE = True
except ImportError:
    ANALYTICS_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_file = "/app/worker.log"
# –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤
handler = RotatingFileHandler(log_file, maxBytes=5*1024*1024, backupCount=2)
logging.basicConfig(
    level=logging.WARNING,  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å INFO –Ω–∞ WARNING
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[handler, logging.StreamHandler()]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot
TOKEN = os.getenv("BOT_TOKEN")
SAVE_APPROVED_DOMAINS = os.getenv("SAVE_APPROVED_DOMAINS", "false").lower() == "true"
if not TOKEN:
    logging.error("BOT_TOKEN environment variable is not set")
    raise ValueError("BOT_TOKEN environment variable is not set")
bot = Bot(token=TOKEN, parse_mode="HTML")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
analytics_collector = None

async def init_analytics():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    global analytics_collector
    if ANALYTICS_AVAILABLE:
        try:
            redis_client = await get_redis()
            analytics_collector = AnalyticsCollector(redis_client)
            logging.info("Worker analytics initialized successfully")
        except Exception as e:
            logging.warning(f"Failed to initialize worker analytics: {e}")

async def log_analytics(action: str, user_id: int, **kwargs):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    if analytics_collector:
        try:
            if action == "domain_check":
                await analytics_collector.log_domain_check(
                    user_id=user_id,
                    domain=kwargs.get("domain", ""),
                    check_type=kwargs.get("check_type", "short"),
                    result_status=kwargs.get("result_status", "unknown"),
                    execution_time=kwargs.get("execution_time")
                )
        except Exception as e:
            logging.warning(f"Failed to log worker analytics: {e}")

async def check_domain(domain: str, user_id: int, short_mode: bool) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–º–µ–Ω —Å retry –ª–æ–≥–∏–∫–æ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    start_time = datetime.now()
    
    async def perform_check():
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ checker.py —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            async with asyncio.timeout(300):
                # run_check –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞, –ø–æ—ç—Ç–æ–º—É –∑–∞–ø—É—Å–∫–∞–µ–º –µ—ë –≤ –ø–æ—Ç–æ–∫–µ
                loop = asyncio.get_event_loop()
                report = await loop.run_in_executor(None, lambda: run_check(domain, full_report=not short_mode))
                return report
        except asyncio.TimeoutError:
            logging.error(f"Timeout while checking {domain} for user {user_id}")
            raise asyncio.TimeoutError(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {domain} –ø—Ä–µ—Ä–≤–∞–Ω–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (5 –º–∏–Ω—É—Ç).")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –ª–æ–≥–∏–∫—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if RETRY_AVAILABLE:
            report = await retry_with_backoff(perform_check, DOMAIN_CHECK_RETRY)
        else:
            report = await perform_check()
            
        execution_time = (datetime.now() - start_time).total_seconds()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        await log_analytics("domain_check", user_id,
                           domain=domain, 
                           check_type="short" if short_mode else "full",
                           result_status="success",
                           execution_time=execution_time)
        
    except Exception as e:
        execution_time = (datetime.now() - start_time).total_seconds()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        await log_analytics("domain_check", user_id,
                           domain=domain,
                           check_type="short" if short_mode else "full", 
                           result_status="failed",
                           execution_time=execution_time)
        
        logging.error(f"Failed to check {domain} for user {user_id}: {str(e)}")
        
        # –£–¥–∞–ª—è–µ–º pending –∫–ª—é—á
        r = await get_redis()
        try:
            await r.delete(f"pending:{domain}:{user_id}")
        finally:
            await r.aclose()
            
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {domain}: {str(e)}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    r = await get_redis()
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –∫—ç—à –Ω–∞ 7 –¥–Ω–µ–π (–≤–º–µ—Å—Ç–æ 24 —á–∞—Å–æ–≤)
        await r.set(f"result:{domain}", report, ex=604800)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ approved_domains (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è)
        if SAVE_APPROVED_DOMAINS and "‚úÖ –ü—Ä–∏–≥–æ–¥–µ–Ω –¥–ª—è Reality" in report:
            await r.sadd("approved_domains", domain)

        output = report  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—á–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ run_check

        await r.lpush(f"history:{user_id}", f"{datetime.now().strftime('%H:%M')} - {domain}")
        await r.ltrim(f"history:{user_id}", 0, 9)
        await r.delete(f"pending:{domain}:{user_id}")
        return output
    except Exception as e:
        logging.error(f"Failed to save result for {domain}: {str(e)}")
        output = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {domain}: {str(e)}"
        return output
    finally:
        await r.aclose()

async def clear_cache(r: redis.Redis):
    try:
        keys = await r.keys("result:*")
        if keys:
            await r.delete(*keys)
    except Exception as e:
        logging.error(f"Failed to clear cache: {str(e)}")

async def cache_cleanup_task(r: redis.Redis):
    while True:
        await clear_cache(r)
        await asyncio.sleep(86400)

def get_group_full_report_button(domain: str, user_id: int):
    """–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É —Å deep link –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –≤ –õ–°"""
    bot_username = os.getenv("BOT_USERNAME", "bot")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞
    deep_link = f"https://t.me/{bot_username}?start=full_{domain}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –õ–°", url=deep_link)]
    ])
    return keyboard

def get_deep_link_button(domain: str):
    """–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É —Å deep link –Ω–∞ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_username = os.getenv("BOT_USERNAME", "bot")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞
    deep_link = f"https://t.me/{bot_username}?start=full_{domain}"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç", url=deep_link)]
    ])
    return keyboard

async def send_group_reply(chat_id: int, message_id: Optional[int], thread_id: Optional[int], text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º –∏ reply"""
    try:
        if thread_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ç–µ–º—É
            if message_id:
                await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    message_thread_id=thread_id,
                    reply_to_message_id=message_id,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    message_thread_id=thread_id,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
        else:
            # –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
            if message_id:
                await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_to_message_id=message_id,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
            else:
                await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
    except Exception as e:
        logging.error(f"Failed to send group reply to {chat_id}: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ reply/thread
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )

async def worker():
    r = await get_redis()
    try:
        await r.ping()
        asyncio.create_task(cache_cleanup_task(r))
        while True:
            try:
                result = await r.brpop("queue:domains", timeout=5)
                if result is None:
                    continue
                _, task = result
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
                try:
                    task_data = json.loads(task)
                    domain = task_data['domain']
                    user_id = int(task_data['user_id'])
                    short_mode = task_data['short_mode']
                    chat_id = task_data.get('chat_id', user_id)
                    message_id = task_data.get('message_id')
                    thread_id = task_data.get('thread_id')
                except (json.JSONDecodeError, KeyError):
                    # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                    domain, user_id, short_mode = task.split(":")
                    user_id = int(user_id)
                    short_mode = short_mode == "True"
                    chat_id = user_id
                    message_id = None
                    thread_id = None
                
                result = await check_domain(domain, user_id, short_mode)
                
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏–ª–∏ –õ–°
                    is_group = chat_id != user_id
                    
                    if is_group:
                        # –í –≥—Ä—É–ø–ø–µ –æ—Ç–≤–µ—á–∞–µ–º –∫—Ä–∞—Ç–∫–∏–º –æ—Ç—á—ë—Ç–æ–º —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–ª–Ω—ã–π –≤ –õ–°"
                        if short_mode:
                            # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç + –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤ –õ–°
                            keyboard = get_group_full_report_button(domain, user_id)
                            await send_group_reply(chat_id, message_id, thread_id, result, keyboard)
                        else:
                            # –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°
                            try:
                                await bot.send_message(user_id, f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è {domain}:\n\n{result}")
                                # –í –≥—Ä—É–ø–ø–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
                                await send_group_reply(chat_id, message_id, thread_id, 
                                                     f"‚úÖ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –¥–ª—è <b>{domain}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                            except Exception as pm_error:
                                # –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–° (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞—á–∞—Ç)
                                logging.warning(f"Failed to send PM to user {user_id}: {pm_error}")
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π deep link
                                warning_text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –õ–° –¥–ª—è <b>{domain}</b>"
                                deep_link_keyboard = get_deep_link_button(domain)
                                await send_group_reply(chat_id, message_id, thread_id, warning_text, deep_link_keyboard)
                    else:
                        # –í –õ–° –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                        await bot.send_message(user_id, result, 
                                             reply_markup=get_full_report_button(domain) if short_mode else None)
                except Exception as e:
                    logging.error(f"Failed to send message to chat {chat_id} for {domain}: {str(e)}")
            except Exception as e:
                logging.error(f"Worker error: {str(e)}")
                await asyncio.sleep(1)
    except Exception as e:
        logging.error(f"Failed to initialize worker: {str(e)}")
    finally:
        await r.aclose()

if __name__ == "__main__":
    asyncio.run(worker())
