#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö GeoIP2.
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
"""

import os
import sys
import json
import time
import requests
import schedule
import threading
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
UPDATE_INFO_FILE = "geoip2_update_info.json"

def load_update_info():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
    try:
        if os.path.exists(UPDATE_INFO_FILE):
            with open(UPDATE_INFO_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö: {e}")
    
    return {
        "last_update": None,
        "next_update": None,
        "download_count": 0,
        "current_db_path": None,
        "file_size": 0
    }

def save_update_info(info):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"""
    try:
        with open(UPDATE_INFO_FILE, 'w', encoding='utf-8') as f:
            json.dump(info, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö: {e}")

def download_geoip2_database(force_update=False):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö GeoIP2 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    info = load_update_info()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if not force_update and info.get("last_update"):
        last_update = datetime.fromisoformat(info["last_update"])
        if datetime.now() - last_update < timedelta(days=7):
            print(f"üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω–∞. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update.strftime('%Y-%m-%d %H:%M:%S')}")
            return info.get("current_db_path")
    
    target_dir = os.getenv("LOG_DIR", "/app/data")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º /app/data –¥–ª—è Docker, /tmp –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    target_path = Path(target_dir)
    target_path.mkdir(exist_ok=True)
    
    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö GeoIP2... (–ø–æ–ø—ã—Ç–∫–∞ #{info['download_count'] + 1})")
    print(f"üìÅ –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {target_path}")
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
    alternative_urls = [
        {
            "url": "https://github.com/P3TERX/GeoLite.mmdb/raw/download/GeoLite2-City.mmdb",
            "name": "P3TERX Mirror",
            "filename": "GeoLite2-City.mmdb"
        },
        {
            "url": "https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country.mmdb",
            "name": "Loyalsoldier Country",
            "filename": "GeoLite2-Country.mmdb"
        },
        {
            "url": "https://github.com/Dreamacro/maxmind-geoip/raw/release/Country.mmdb",
            "name": "Dreamacro Country",
            "filename": "GeoLite2-Country-Alt.mmdb"
        }
    ]
    
    for i, source in enumerate(alternative_urls, 1):
        try:
            print(f"üì• –ü–æ–ø—ã—Ç–∫–∞ {i}/{len(alternative_urls)}: {source['name']}")
            print(f"   URL: {source['url']}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
            response = requests.get(source['url'], timeout=60, stream=True)
            
            if response.status_code == 200:
                filepath = target_path / source['filename']
                temp_filepath = target_path / f"{source['filename']}.tmp"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                total_size = int(response.headers.get('content-length', 0))
                downloaded = 0
                
                print(f"   üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {total_size / (1024*1024):.1f} MB")
                
                with open(temp_filepath, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                            downloaded += len(chunk)
                            
                            # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                            if total_size > 0:
                                progress = (downloaded / total_size) * 100
                                print(f"\r   ‚è≥ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {progress:.1f}% ({downloaded / (1024*1024):.1f} MB)", end='')
                
                print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                file_size = temp_filepath.stat().st_size
                if file_size > 1024 * 1024:  # –ë–æ–ª—å—à–µ 1MB
                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –º–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
                    if filepath.exists():
                        filepath.unlink()
                    temp_filepath.rename(filepath)
                    
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {filepath} ({file_size / (1024*1024):.1f} MB)")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    now = datetime.now()
                    info.update({
                        "last_update": now.isoformat(),
                        "next_update": (now + timedelta(days=7)).isoformat(),
                        "download_count": info.get("download_count", 0) + 1,
                        "current_db_path": str(filepath),
                        "file_size": file_size,
                        "source_name": source['name'],
                        "source_url": source['url']
                    })
                    save_update_info(info)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
                    os.environ["GEOIP2_DB_PATH"] = str(filepath)
                    
                    print(f"üîß –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GEOIP2_DB_PATH —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {filepath}")
                    print(f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {info['next_update'][:19]}")
                    
                    return str(filepath)
                else:
                    print(f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª ({file_size} bytes), –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞")
                    temp_filepath.unlink()
            else:
                print(f"‚ùå HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ {source['name']}: {e}")
    
    print("\n‚ùå –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    return None

def check_and_update_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
    print(f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π GeoIP2...")
    
    try:
        result = download_geoip2_database()
        if result:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö GeoIP2 –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
            try:
                import geoip2.database
                with geoip2.database.Reader(result) as reader:
                    test_response = reader.city('8.8.8.8')
                    print(f"üß™ –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {test_response.country.name} / {test_response.city.name}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")

def start_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π GeoIP2...")
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 03:00
    schedule.every().sunday.at("03:00").do(check_and_update_database)
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
    check_and_update_database()
    
    print("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 03:00")
    
    while True:
        schedule.run_pending()
        time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å

def run_scheduler_in_background():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
    scheduler_thread = threading.Thread(target=start_scheduler, daemon=True)
    scheduler_thread.start()
    print("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ GeoIP2 –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    return scheduler_thread

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö GeoIP2")
    parser.add_argument("--force", action="store_true", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    parser.add_argument("--daemon", action="store_true", help="–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞")
    parser.add_argument("--status", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
    
    args = parser.parse_args()
    
    if args.status:
        info = load_update_info()
        if info.get("last_update"):
            print(f"üìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö GeoIP2:")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {info['last_update'][:19]}")
            print(f"   –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {info.get('next_update', 'N/A')[:19]}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫: {info.get('download_count', 0)}")
            print(f"   –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: {info.get('current_db_path', 'N/A')}")
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {info.get('file_size', 0) / (1024*1024):.1f} MB")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {info.get('source_name', 'N/A')}")
        else:
            print("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö GeoIP2 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    elif args.daemon:
        start_scheduler()
    else:
        download_geoip2_database(force_update=args.force)
