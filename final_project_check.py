#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
"""

import os
from pathlib import Path

def check_env_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env.sample
    env_sample_path = Path('.env.sample')
    if env_sample_path.exists():
        content = env_sample_path.read_text(encoding='utf-8')
        if 'GROUP_OUTPUT_MODE=short' in content:
            print("‚úÖ .env.sample —Å–æ–¥–µ—Ä–∂–∏—Ç GROUP_OUTPUT_MODE")
        else:
            print("‚ùå .env.sample –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç GROUP_OUTPUT_MODE")
    else:
        print("‚ùå .env.sample –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env
    env_path = Path('.env')
    if env_path.exists():
        content = env_path.read_text(encoding='utf-8')
        if 'GROUP_OUTPUT_MODE=short' in content:
            print("‚úÖ .env —Å–æ–¥–µ—Ä–∂–∏—Ç GROUP_OUTPUT_MODE")
        else:
            print("‚ùå .env –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç GROUP_OUTPUT_MODE")
    else:
        print("‚ùå .env –Ω–µ –Ω–∞–π–¥–µ–Ω")

def check_bot_py():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ bot.py"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ bot.py...")
    
    bot_path = Path('bot.py')
    if not bot_path.exists():
        print("‚ùå bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    content = bot_path.read_text(encoding='utf-8')
    
    checks = [
        ('GROUP_OUTPUT_MODE = os.getenv', "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GROUP_OUTPUT_MODE"),
        ('def get_full_report_button' not in content, "–§—É–Ω–∫—Ü–∏—è get_full_report_button —É–¥–∞–ª–µ–Ω–∞"),
        ('def get_group_full_report_button' not in content, "–§—É–Ω–∫—Ü–∏—è get_group_full_report_button —É–¥–∞–ª–µ–Ω–∞"),
        ('cq_full_report' not in content, "Callback handler cq_full_report —É–¥–∞–ª–µ–Ω"),
        ('final_short_mode = short_mode and (GROUP_OUTPUT_MODE == "short")', "–õ–æ–≥–∏–∫–∞ GROUP_OUTPUT_MODE –¥–ª—è –≥—Ä—É–ø–ø"),
        ('–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –õ–° –±–æ—Ç—É', "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø"),
    ]
    
    for check, description in checks:
        if isinstance(check, str):
            if check in content:
                print(f"‚úÖ {description}")
            else:
                print(f"‚ùå {description}")
        else:
            if check:
                print(f"‚úÖ {description}")
            else:
                print(f"‚ùå {description}")

def check_worker_py():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ worker.py"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ worker.py...")
    
    worker_path = Path('worker.py')
    if not worker_path.exists():
        print("‚ùå worker.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    content = worker_path.read_text(encoding='utf-8')
    
    checks = [
        ('GROUP_OUTPUT_MODE = os.getenv', "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GROUP_OUTPUT_MODE"),
        ('def get_full_report_button' not in content, "–§—É–Ω–∫—Ü–∏—è get_full_report_button —É–¥–∞–ª–µ–Ω–∞"),
        ('def get_group_full_report_button' not in content, "–§—É–Ω–∫—Ü–∏—è get_group_full_report_button —É–¥–∞–ª–µ–Ω–∞"),
        ('InlineKeyboardMarkup' not in content, "–ò–º–ø–æ—Ä—Ç InlineKeyboardMarkup —É–¥–∞–ª–µ–Ω"),
        ('GROUP_OUTPUT_MODE == "short"', "–õ–æ–≥–∏–∫–∞ GROUP_OUTPUT_MODE"),
        ('–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –õ–° –±–æ—Ç—É', "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø"),
    ]
    
    for check, description in checks:
        if isinstance(check, str):
            if check in content:
                print(f"‚úÖ {description}")
            else:
                print(f"‚ùå {description}")
        else:
            if check:
                print(f"‚úÖ {description}")
            else:
                print(f"‚ùå {description}")

def check_readme():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ README.md"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ README.md...")
    
    readme_path = Path('README.md')
    if not readme_path.exists():
        print("‚ùå README.md –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    content = readme_path.read_text(encoding='utf-8')
    
    if 'GROUP_OUTPUT_MODE=short' in content:
        print("‚úÖ README.md —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è GROUP_OUTPUT_MODE")
    else:
        print("‚ùå README.md –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è GROUP_OUTPUT_MODE")

def main():
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ bot-reality")
    print("=" * 50)
    
    # –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not Path('bot.py').exists():
        os.chdir('c:/Users/digne/OneDrive/–î–æ–∫—É–º–µ–Ω—Ç—ã/GitHub/bot-reality')
    
    check_env_files()
    check_bot_py()
    check_worker_py()
    check_readme()
    
    print("\n" + "=" * 50)
    print("üìã –ò—Ç–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GROUP_OUTPUT_MODE –≤ .env —Ñ–∞–π–ª—ã")
    print("‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫")
    print("‚úÖ –£–¥–∞–ª–µ–Ω callback handler –¥–ª—è –∫–Ω–æ–ø–æ–∫")
    print("‚úÖ –£–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞: —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫")
    print("‚úÖ Deep-link —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤ README.md")
    print("\nüéØ Deep-link https://t.me/gig_reality_bot?start=ya.ru –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å!")

if __name__ == "__main__":
    main()
